@model Egghead.Models.Articles.ArticleModel

@Html.Partial("TopNavigationPartial")

<div id="article" class="container-boxed">
    <article>
        <div class="card m-b-20">
            <small class="text-muted m-l-10 m-t-10">Created by <ins>Chicu Victor</ins> today at 17:15</small>

            <div class="card-body">
                <h4 class="card-title">@Model.Title</h4>
                <p class="card-text">@Html.Raw(@Model.Text)</p>
            </div>

            <div style="border-bottom: 1px solid #e3e3e3; padding-left: 20px; padding-bottom: 20px">
                <h4 id="comments-count">
                </h4>
            </div>

            <div id="comment-form" class="p-4">   
                <textarea id="comment-editor" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">    
                        <button id="publish-comment" class="btn btn-light waves-effect waves-light btn-sm">Publish a comment</button>
                    </div>    
                </div>
            </div>

            <div id="article-comments" class="container-fluid">
                @* @Html.Partial("GetArticleCommentsPartial") *@
            </div>
        </div>
    </article>
</div>

<script>   
    function showReplyForm(replyTo, commentId) {
        removeReplyForm("reply-form");

        console.log(`Reply To: ${replyTo} Comment ID: ${commentId}`);

        $(`#${commentId} .reply-footer:first`).append(
            `<div id="reply-form">   
                <textarea id="reply-editor" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">            
                        <input id="submit-reply" type="button" class="btn btn-light waves-effect waves-light btn-sm" value="Reply"/>
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>
                    </div>    
                </div>
            </div>`
        );

        var editor = new SimpleMDE({
            status: false,
            element: $("#reply-editor")[0],
            placeholder: "Type here...",
            fullScreen: false,
            withPreview: false
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }

        var articleId = $.urlParam('articleId');

        $("#submit-reply").click(function() {
            removeReplyForm("reply-form");

            var text = editor.options.previewRender(editor.value());

            var parentId = (replyTo == null ? commentId : replyTo);

            createCommentReplyAsync(articleId, parentId,
                {
                    text: text,
                    replyTo: parentId
                });
        });
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }
    
    function onCommentVoteClick(commentId, voteType) {
        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }
        
        var articleId = $.urlParam('articleId');

        createArticleCommentVoteAsync(articleId, commentId, voteType);
    }
    
    function createCommentReplyAsync(articleId, replyTo, comment) {
        $.ajax({
            url: `/Articles/CreateArticleComment?articleId=${articleId}`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + jqXhr);
                console.log("errorThrown: " + jqXhr);
            },
            success: function(response) {
                $(`#${replyTo} .media-body:first`).append(`
                <div id="${response.id}" class="media p-3">
                    <img src="/images/64x64.svg" width="48" height="48" alt="">
                    <div class="media-body">
                        <div class="col-auto">
                            <h6 class="mt-0">${response.firstName} ${response.lastName}, ${response.createdAt}</h6>
                        </div>
                        <div class="col-auto">
                            <h6>${response.text}</h6>
                        </div>
                        <div class="col-auto">
                            <a href="#reply" onclick="showReplyForm('${replyTo}', '${response.id}')">Reply</a>
                            <div name="btn-like" onclick="onCommentVoteClick('${response.id}', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-up"></i>
                            </div>
                            <span name="voting-points">${response.votingPoints}</span>
                            <div name="btn-dislike" onclick="onCommentVoteClick('${response.id}', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-down"></i>
                            </div>
                        </div>
                        <div class="reply-footer"></div>
                    </div>
                </div>
                `);
                countArticleCommentsByArticleIdAsync(articleId);
            }
        });
    }

    function createArticleCommentAsync(articleId, comment) {
        $.ajax({
            url: `/Articles/CreateArticleComment?articleId=${articleId}`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + jqXhr);
                console.log("errorThrown: " + jqXhr);
            },
            success: function(response) {
                $("#article-comments").append(`
                <div id="${response.id}" class="media p-3">
                    <img src="/images/64x64.svg" width="48" height="48">
                    <div class="media-body">
                        <div class="col-auto">
                            <h6 class="mt-0">${response.firstName} ${response.lastName}, ${response.createdAt}</h6>
                        </div>
                        <div class="col-auto">
                        <h6>${response.text}</h6>
                        </div>
                        <div class="col-auto">
                            <a href="#reply" onclick="showReplyForm(null, '${response.id}')">Reply</a>
                            <div name="btn-like" onclick="onCommentVoteClick('${response.id}', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-up"></i>
                            </div>
                            <span name="voting-points">${response.votingPoints}</span>
                            <div name="btn-dislike" onclick="onCommentVoteClick('${response.id}', 2)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-down"></i>
                            </div>
                        </div>
                        <div class="reply-footer"></div>
                    </div>
                </div>`);
                countArticleCommentsByArticleIdAsync(articleId);
            }
        });
    }
    
    function createArticleCommentVoteAsync(articleId, commentId, voteType) {
        var vote = {
            voteType: voteType,
            commentId: commentId
        }
        $.ajax({
            url: "/Articles/CreateArticleCommentVote?articleId=" + articleId,
            type: "POST",
            data: JSON.stringify(vote),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + jqXhr);
                console.log("errorThrown: " + jqXhr);
            },
            success: function(response) {
                switch (voteType) {
                case 1:
                    {
                        $(`#${commentId} span[name=voting-points]:first`).text(response);
                    }
                    break;
                case 2:
                    {
                        $(`#${commentId} span[name=voting-points]:first`).text(response);
                    }
                    break;
                }

            }
        });
    }

    function findArticleCommentsByArticleIdAync(articleId) {
        $.ajax({
            url: `/Articles/FindArticleCommentsByArticleId?articleId=${articleId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + jqXhr);
                console.log("errorThrown: " + jqXhr);
            },
            success: function(response) {
                $("#article-comments").html(response);
            }
        });
    }

    function countArticleCommentsByArticleIdAsync(articleId) {
        $.ajax({
            url: `/Articles/CountArticleCommentsByArticleId?articleId=${articleId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + jqXhr);
                console.log("errorThrown: " + jqXhr);
            },
            success: function(response) {
                $("#comments-count").html(`Comments (${response})`);
            }
        });
    }

    $(document).ready(function() {
        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }

        var editor = new SimpleMDE({
            status: false,
            element: $("#comment-editor")[0],
            placeholder: "Type here...",
            fullScreen: false,
            withPreview: false
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        var articleId = $.urlParam('articleId');

        $("#publish-comment").click(function() {
            var text = editor.options.previewRender(editor.value());
            createArticleCommentAsync(articleId, {
                text: text
            });
        });
        
        findArticleCommentsByArticleIdAync(articleId);
        countArticleCommentsByArticleIdAsync(articleId);      
    });
</script>