@using Egghead.Models.Articles
@using Humanizer
@model CompositeArticleModel

@Html.Partial("Header", Model)

<section id="article" class="content">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="text-muted p-3">
                    <a href="/@Model.Profile.Name">
                        <small class="font-weight-bold">@Model.Profile.Name</small>
                    </a> <small class="time"> @Model.Articles[0].CreatedAt.Humanize()</small>
                </div>

                <div class="card-body card-body__img">
                    <h4>@Model.Articles[0].Title</h4>
                    <p class="card-text">@Html.Raw(Model.Articles[0].Text)</p>
                </div>

                <div style="border-bottom: 1px solid #e3e3e3; padding-left: 20px; padding-bottom: 20px">
                    <h4 id="comments-count">
                        @Model.Articles[0].CommentsCount Comments
                    </h4>
                </div>

                <div id="comment-form" class="p-4">
                    <textarea id="comment-editor" style="display: none"></textarea>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button id="publish-comment" class="btn btn-light waves-effect waves-light btn-sm">Add a public comment...</button>
                        </div>
                    </div>
                </div>

                <div id="article-comments" class="container-fluid">
                    @* @Html.Partial("ArticleCommentsPartial") *@
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card p-4">
                <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 20px;">
                    <h4 class="text-muted font-weight-bold">Popular on Egghead</h4>
                </div>
                @*                 @{ *@
                @*                     var popularArticles = (List<PopularArticleModel>)ViewBag.PopularArticles; *@
                @*                      *@
                @*                     if (popularArticles != null) *@
                @*                     { *@
                @*                         <div class="listview"> *@
                @*                             @foreach (var popularArticle in popularArticles) *@
                @*                             { *@
                @*                                 <div class="listview__item"> *@
                @*                                     <div class="mr-2" style="width: 50px; height: 50px"> *@
                @*                                         <img src="/images/users/user_empty.png" class="listview__img" alt="">  *@
                @*                                     </div> *@
                @* *@
                @*                                     <div class="listview__content"> *@
                @*                                         <div class="listview__heading"> *@
                @*                                             <p> *@
                @*                                                 <a class="font-weight-bold" href="/Articles/@popularArticle.CommentId">@popularArticle.Title</a> *@
                @*                                             </p> *@
                @*                                         </div> *@
                @*                                         <p> *@
                @*                                             <a href="/Profiles/Profile">@popularArticle.Name</a> <small class="time"> @popularArticle.CreatedAt.Humanize()</small> *@
                @*                                         </p> *@
                @*                                     </div> *@
                @*                                 </div> *@
                @*                             } *@
                @*                         </div> *@
                @*                     } *@
                @*                 } *@
            </div>
        </div>
    </div>
</section>

<script>
    function showReplyForm(replyTo, commentId) {
        removeReplyForm("reply-form");

        console.log(`Reply to: ${replyTo} Comment id: ${commentId}`);

        $(`#${commentId} #reply-placeholder:first`).append(
            `<div id="reply-form">   
                <textarea id="reply-editor" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">            
                        <input id="submit-reply" type="button" class="btn btn-light waves-effect waves-light btn-sm" value="Reply"/>
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>
                    </div>    
                </div>
            </div>`
        );

        var editor = new SimpleMDE({
            status: false,
            element: $("#reply-editor")[0],
            placeholder: "Type here...",
            fullScreen: false,
            withPreview: false
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }

        var articleId = $.urlParam('articleId');

        $("#submit-reply").click(function() {
            removeReplyForm("reply-form");

            var text = editor.options.previewRender(editor.value());

            createCommentReplyAsync({
                articleId: articleId,
                text: text,
                replyTo: (replyTo == null ? commentId : replyTo)
            });
        });
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }

    function onCommentVoteClick(commentId, voteType) {
        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }

        var articleId = $.urlParam('articleId');

        createArticleCommentVoteAsync(articleId, commentId, voteType);
    }

    function createCommentReplyAsync(comment) {
        $.ajax({
            url: `/Articles/CreateArticleCommentAsync`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $(`#${comment.replyTo} .media-body:first`).append(`
                <div id="${response.id}" class="media p-3">
                    <img src="/images/64x64.svg" width="48" height="48" alt="">
                    <div class="media-body media__img">
                        <div class="col-auto">
                            ${response.name} <small class="time"> ${response.createdAt}</small>
                        </div>
                        <div class="col-auto">
                            <h6>${response.text}</h6>
                        </div>
                        <div class="col-auto">
                            <a href="#reply" onclick="showReplyForm('${comment.replyTo}', '${response.id}')">Reply</a>
                            <div name="btn-like" onclick="onCommentVoteClick('${response.id
                    }', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-up"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <div name="btn-dislike" onclick="onCommentVoteClick('${response.id
                    }', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-down"></i>
                            </div>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>
                `);
            }
        });
    }

    function createArticleCommentAsync(comment) {
        $.ajax({
            url: `/Articles/CreateArticleCommentAsync`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#article-comments").append(`
                <div id="${response.id}" class="media p-3">
                    <img src="/images/64x64.svg" width="48" height="48">
                    <div class="media-body media__img">
                        <div class="col-auto">
                            ${response.name} <small class="time"> ${response.createdAt}</small>
                        </div>
                        <div class="col-auto">
                            <h6>${response.text}</h6>
                        </div>
                        <div class="col-auto">
                            <a href="#reply" onclick="showReplyForm(null, '${response.id}')">Reply</a>
                            <div name="btn-like" onclick="onCommentVoteClick('${response.id
                    }', 1)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-up"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <div name="btn-dislike" onclick="onCommentVoteClick('${response.id
                    }', 2)" class="r-btn r-btn-light r-btn--icon">
                                <i class="fa fa-thumbs-o-down"></i>
                            </div>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>`);
            }
        });
    }

    function createArticleCommentVoteAsync(articleId, commentId, voteType) {
        var vote = {
            articleId: articleId,
            commentId: commentId,
            voteType: voteType
        }
        $.ajax({
            url: "/Articles/CreateArticleCommentVoteAsync",
            type: "POST",
            data: JSON.stringify(vote),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        $(`#${commentId} span[name=votes-count]:first`).text(response.votesCount);
                    }
                    break;
                case 2:
                    {
                        $(`#${commentId} span[name=votes-count]:first`).text(response.votesCount);
                    }
                    break;
                }

            }
        });
    }

    function findArticleCommentsByArticleIdAync(articleId) {
        $.ajax({
            url: `/Articles/FindArticleCommentsByArticleIdAsync/${articleId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#article-comments").html(response);
            }
        });
    }

    $(document).ready(function() {
        var editor = new SimpleMDE({
            status: false,
            element: $("#comment-editor")[0],
            placeholder: "Type here...",
            fullScreen: false,
            withPreview: false
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $.urlParam = function(name, url) {
            if (!url) {
                url = window.location.href;
            }
            var results = new RegExp('[\\?&/]' + name + '=([^&#]*)').exec(url);
            if (!results) {
                return undefined;
            }
            return results[1] || undefined;
        }
        
        var articleId = $.urlParam('articleId');

        $("#publish-comment").click(function() {
            var text = editor.options.previewRender(editor.value());
            createArticleCommentAsync(
                {
                    articleId: articleId,
                    text: text
                });
        });

        findArticleCommentsByArticleIdAync(articleId);
    });
</script>