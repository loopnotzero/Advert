@model Egghead.Models.LoginViewModel

@* @{ ViewData["Title"] = "Login on Egghead"; } *@

<div class="card-box">
    <div class="row">
        <div class="title col-md-12 font-bold text-left m-b-30" style="color: #222">
            <h6>
                Sign in with your Egghead account
            </h6>
        </div>
    </div>
    <form id="form" asp-controller="Account" asp-action="Login" asp-route-returnurl="@ViewData["ReturnUrl"]" method="post" novalidate="">
        <div class="form-group form-mbt-3 row">
            <div class="col-md-12">
                <label class="floating-label label-required">Email</label>
                <input type="email">
            </div>
        </div>
        <div class="form-group form-mbt-4 row">
            <div class="col-md-12">
                @* todo: Add eye open/closed *@
                <label class="floating-label label-required">Password</label>
                <input type="password">
            </div>
        </div>
        <div class="form-group form-mbt-3 row">
            <div class="input-group">
                <span class="p-t-7">
                    <a href="/Account/PasswordReset" class="text-muted"><i class="fa fa-lock m-r-5"></i> Forgot password?</a>
                </span>
                <span class="input-group-btn ml-auto">
                    <button id="eggh-login" class="btn btn-danger w-xs waves-effect waves-light">Next</button>
                </span>
            </div>
        </div>
        <div class="form-group row">
            <div class="container align-center">
                Don't have an account? <a href="/Account/Register">Sign Up</a>
            </div>
        </div>
    </form>
</div>

<script>
    function init() {
        var emailInput = $("input[type='email']");
        var passwordInput = $("input[type='password']");        
        var floatingLabel = "floating-lable";
        var floatingLabelError = "floating-label-error";
        var labelTransform = "label-transform";
        var labelErrorTransform = "label-error-transform";      
        var requestVerificationToken = $("input[name=__RequestVerificationToken]");
        
        //todo: Add class for changing css background

        function inputFocusIn(form) {
            var prevElement = form.prev();
            prevElement.addClass(!prevElement.hasClass(floatingLabelError) ? labelTransform : labelErrorTransform);
        }

        function inputFocusOut(form) {
            var prev = form.prev();
            if (!prev.hasClass(floatingLabelError)) {
                prev.toggleClass(labelTransform, !((form[0].value === "") && prev.hasClass(labelTransform)));
            } else {
                prev.toggleClass(labelErrorTransform, !((form[0].value === "") && prev.hasClass(labelErrorTransform)));                
                if (!(form[0].value === "")) {
                    prev.removeClass(floatingLabelError + " " + labelErrorTransform).addClass(floatingLabel + " " + labelTransform);
                    form.css("background", "linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #5682a3 96%)");
                }
            }
        }

        function onAjaxRequestError(jqXhr, textStatus, errorThrown) {
            console.log("jqXhr: " + JSON.stringify(jqXhr));
            console.log("Text status: " + JSON.stringify(textStatus));
            console.log("Error thrown: " + JSON.stringify(errorThrown));

            switch (errorThrown) {
            case "Bad Request":
                {
                    switch (jqXhr.responseJSON.responseStatusCode) {
                    case 1:
                        {
                            emailInput
                                .css("background",
                                    "linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #ee6e73 96%)")
                                .prev().addClass(floatingLabelError).text(jqXhr.responseJSON.errorMessage);
                        }
                        break;
                    case 11:
                        {
                            passwordInput
                                .css("background",
                                    "linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #ee6e73 96%)")
                                .prev().addClass(floatingLabelError).text(jqXhr.responseJSON.errorMessage);
                        }
                        break;
                    }
                }
                break;
            case "Internal Server Error":
                {
                    //todo: Add card box notification
                    console.log("Service is temporarily unavailable, please try again later");
                }
                break;
            }
        }

        function onAjaxRequestSuccess(response) {
            console.log("Error message: " + response.errorMessage);
            console.log("Response status code: " + response.responseStatusCode);

            switch (response.responseStatusCode) {
            case 2: //Email not found
                {
                    emailInput
                        .css("background", "linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #ee6e73 96%)")                  
                        .prev().addClass(floatingLabelError + " " + labelErrorTransform).text(response.errorMessage);
                }
                break;
            case 10: //Password do not match
                {
                    passwordInput
                        .css("background",
                            "linear-gradient(to bottom, rgba(255, 255, 255, 0) 96%, #ee6e73 96%)")
                        .prev().addClass(floatingLabelError + " " + labelErrorTransform).text(response.errorMessage);
                }
                break;
            case 20: //Authorization failed
                {

                }
                break;
            default: //Not implemented response status handling
                {

                }
                break;
            }
        }

        $("input[type='email'], input[type='password']").focusin(function() {
            inputFocusIn($(this));
        }).focusout(function() {
            inputFocusOut($(this));
        });

        $("#eggh-login").click(function(e) {
            e.preventDefault();
            var url = $("#form").attr("action");
            console.log("Request url: " + url);
            var token = requestVerificationToken.val();
            console.log("Request verification token: " + token);
            var email = emailInput.val();
            console.log("Email: " + email);
            var password = passwordInput.val();
            console.log("Password: " + password);

            var additionalHeaders = {};

            if (token) {
                additionalHeaders["RequestVerificationToken"] = token;
            }

            $.ajax({
                url: url,
                type: "POST",
                data: JSON.stringify({ email: email, password: password }),
                headers: additionalHeaders,
                contentType: "application/json",
                error: function(jqXhr, textStatus, errorThrown) {
                    onAjaxRequestError(jqXhr, textStatus, errorThrown);
                },
                success: function(response) {
                    onAjaxRequestSuccess(response);
                }
            });

            return false;
        });
    }

    $(document).ready(function() {
        init();
    });
</script>