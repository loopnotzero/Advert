@using Advert.Models.Post
@using Humanizer
@model AggregatorViewModel

@await Html.PartialAsync("_Header", Model)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section id="@Model.Posts.First().PostId" name="post" class="content">
    <div class="row">
        <div class="col-md-8 p-2">
            <div class="card">
                <div class="row">
                    <div class="col-sm-6">
                        <div class="card-user">
                            <div class="card-user__info">
                                <a href="/Profiles/5c27ea98eb64801aec9f3e5b">
                                    <img src="/images/profiles/5c27ea98eb64801aec9f3e5b/0.jpeg" class="card-user__img" alt="">
                                </a>
                                <div>
                                    <a href="/Profile/@Model.Posts.First().ProfileId">
                                        <div class="card-user__name">@Model.Posts.First().ProfileName</div>
                                    </a>
                                    <div style="display: flex">
                                        <div class="post-header__time">@Model.Posts.First().CreatedAt.Humanize()</div>
                                        <div class="post-header__tags">
                                            <a href="" title="" data-placement="top" data-target="#edit-tags__modal--@Model.Posts.First().PostId" data-toggle="modal">
                                                <i class="zmdi zmdi-tag-more zmdi-hc-fw post-header__icon"></i>Edit tags
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <div style="text-align: right; padding-top: 1rem; padding-right: 1rem">
                            <ul class="list-inline">
                                <li class="list-inline-item" onclick="onEditPostClick('@Model.Posts.First().PostId')">
                                    <a href="" title="" data-placement="top" data-target="#edit-post__modal" data-toggle="modal">
                                        <i class="zmdi zmdi-edit zmdi-hc-fw"></i>
                                    </a>
                                </li>
                                <li class="list-inline-item" onclick="onDeletePostClick('@Model.Posts.First().PostId')">
                                    <a href="" title="" data-placement="top" data-target="#delete-post__modal" data-toggle="modal">
                                        <i class="zmdi zmdi-delete zmdi-hc-fw"></i>
                                    </a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="card-body card-body__img">
                    <h4>@Model.Posts.First().Title</h4>
                    <p>
                        @if (Model.Posts.First().Price > 0)
                        {
                            <span style="font-size: 0.9rem; color: #71a830">@Model.Posts.First().Price@Model.Posts.First().Currency</span>
                        }
                        else
                        {
                            <span style="font-size: 0.9rem; color: #71a830">FREE</span>
                        }
                    </p>
                    <p>
                        @if (@Model.Posts.First().Location != null)
                        {
                            <i class="zmdi zmdi-pin zmdi-hc-fw"></i>
                            <span style="font-size: 0.9rem; color: #90949c">@Model.Posts.First().Location</span>
                        }
                    </p>
                    <p class="card-text">@Html.Raw(Model.Posts.First().Text)</p>
                </div>
                <div style="border-bottom: 1px solid #e3e3e3; padding-left: 20px; padding-bottom: 20px">
                    <h4>
                        <span id="comments-count">@Model.Posts.First().CommentsCount</span> Comments
                    </h4>
                </div>
                <div id="comment-form" class="p-4">
                    <textarea id="comment-editor__write--comment" style="display: none"></textarea>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button id="add-comment" class="btn btn-primary__advert waves-effect waves-light btn-sm">COMMENT</button>
                        </div>
                    </div>
                </div>
                <div id="post-comments" class="container-fluid">
                    @if (Model.PostComments != null && Model.PostComments.Any())
                    {
                        foreach (var comment in Model.PostComments)
                        {
                            <div id="@comment.CommentId" class="media p-2">
                                @if (!string.IsNullOrEmpty(comment.ProfileImagePath))
                                {
                                    <img class="card-user__img" src="@comment.ProfileImagePath" width="48" height="48" alt="profile-image">
                                }
                                else
                                {
                                    <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
                                }
                                <div class="media-body media__img content__break">
                                    <div class="col-auto">
                                        <span class="font-weight-bold" style="font-size: 0.8rem">
                                            <a href="/Profile/@comment.ProfileName">@comment.ProfileName</a>
                                        </span>
                                        <span class="time" style="font-size: 0.8rem"> @comment.CreatedAt</span>
                                    </div>
                                    <div class="col-auto media__border">
                                        <div class="media__comment">
                                            <h7>@Html.Raw(comment.Text)</h7>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <div class="r-btn r-btn-light r-btn--icon" onclick="onVoteCommentClick('@comment.CommentId', 1)">
                                            <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                        </div>
                                        <span name="votes-count">@comment.VotesCount</span>
                                        <span class="reply"></span> <a href="#reply" onclick="showReplyForm(null, '@comment.CommentId')">Reply</a>
                                    </div>
                                    <div id="reply-placeholder"></div>
                                    @if (comment.Comments != null)
                                    {
                                        foreach (var reply in comment.Comments)
                                        {
                                            <div id="@reply.CommentId" class="media p-2">
                                                @if (!string.IsNullOrEmpty(reply.ProfileImagePath))
                                                {
                                                    <img class="card-user__img" src="@reply.ProfileImagePath" width="48" height="48" alt="profile-image">
                                                }
                                                else
                                                {
                                                    <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
                                                }
                                                <div class="media-body media__img content__break">
                                                    <div class="col-auto">
                                                        <span class="font-weight-bold" style="font-size: 0.8rem">
                                                            <a href="/Profile/@reply.ProfileName">@reply.ProfileName</a>
                                                        </span>
                                                        <span class="time" style="font-size: 0.8rem"> @reply.CreatedAt</span>
                                                    </div>
                                                    <div class="col-auto media__border">
                                                        <div class="media__comment">
                                                            <h7>@Html.Raw(reply.Text)</h7>
                                                        </div>
                                                    </div>
                                                    <div class="col-auto">
                                                        <div class="r-btn r-btn-light r-btn--icon" onclick="onCommentVoteClick('@reply.CommentId', 1)">
                                                            <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                                        </div>
                                                        <span name="votes-count">@reply.VotesCount</span>
                                                        <span class="reply"></span> <a href="#reply" onclick="showReplyForm('@reply.ReplyTo', '@reply.CommentId')">Reply</a>
                                                    </div>
                                                    <div id="reply-placeholder"></div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4 p-2">
            <div class="card p-4">
                <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;">
                    <h4 class="text-muted">Recommendations</h4>
                </div>
                @{
                    @await Html.PartialAsync("RecommendedPosts", Model.RecommendedPosts)
                }
            </div>
        </div>
    </div> 
    @await Html.PartialAsync("EditPostTagsModal", @Model.Posts.First())
    
    @* @await Html.PartialAsync("AddPostModal") *@
    @* @await Html.PartialAsync("EditPostModal") *@
    @* @await Html.PartialAsync("DeletePostModal") *@
</section>

<script>
    
    function showReplyForm(replyTo, commentId) {
        removeReplyForm("reply-form");

        $(`#${commentId} #reply-placeholder:first`).append(
            `<div id="reply-form">   
                <textarea id="reply-editor__write-reply" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">   
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>     
                        <input id="submit-reply" type="button" class="btn btn-primary__advert waves-effect waves-light btn-sm" value="Reply"/>
                    </div>    
                </div>
            </div>`
        );

        var replyEditor = new SimpleMDE({
            status: false,
            element: $("#reply-editor__write-reply")[0],
            placeholder: "Add a public reply...",
            fullScreen: false,
            withPreview: false,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $("#submit-reply").click(function() {
            removeReplyForm("reply-form");
            var text = replyEditor.options.previewRender(replyEditor.value());
            var postId = $(`[name='post']`).attr("id");
            createCommentReplyAsync({
                text: text,
                replyTo: (replyTo == null ? commentId : replyTo),
                postId: postId,
            });
        });
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }

    function onAddCommentClick() {
        $("#add-comment").click(function() {
            var text = postEditor[2].options.previewRender(postEditor[2].value());
            var postId = $(`[name='post']`).attr("id");
            createAdsTopicCommentAsync(
                {
                    postId: postId,
                    text: text
                });
            postEditor[2].value("");
        });
    }

    function onVoteCommentClick(commentId, voteType) {
        var postId = $(`[name='postId']`).attr("id");
        createPostCommentVoteAsync(postId, commentId, voteType);
    }

    function createCommentReplyAsync(comment) {
        $.ajax({
            url: `/Posts/CreatePostCommentAsync`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $(`#${comment.replyTo} .media-body:first`).append(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath
                    }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time" style="font-size: 0.8rem"> ${response.createdAt}</span>  
                        </div>                        
                        <div class="col-auto media__border">
                            <div class="media__comment">
                                <h7>${response.text}</h7>
                            </div>             
                        </div>
                        <div class="col-auto">
                            <div class="r-btn r-btn-light r-btn--icon" onclick="onCommentVoteClick('${response
                    .commentId}', 1)" >
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <a href="#reply" onclick="showReplyForm('${comment.replyTo}', '${response.commentId
                    }')">Reply</a>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>
                `);

                $([document.documentElement, document.body]).animate({
                        scrollTop: $(`#${response.commentId}`).offset().top - 250
                    },
                    200);

                updatePostCommentsCountByPostId(response.postId);
            }
        });
    }

    function createPostCommentAsync(comment) {
        $.ajax({
            url: `/Posts/CreatePostCommentAsync`,
            type: "POST",
            data: JSON.stringify(comment),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#post-comments").prepend(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath
                    }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time"> ${response.createdAt}</span>         
                        </div>                        
                        <div class="col-auto media__border">
                            <div class="media__comment">
                                <h7>${response.text}</h7>
                            </div>   
                        </div>
                        <div class="col-auto">
                            <div class="r-btn r-btn-light r-btn--icon" onclick="onCommentVoteClick('${response
                    .commentId}', 1)">
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <a href="#reply" onclick="showReplyForm(null, '${response.commentId}')">Reply</a>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>`);

                $([document.documentElement, document.body]).animate({
                        scrollTop: $(`#${response.commentId}`).offset().top - 250
                    },
                    200);

                updatePostCommentsCountByPostId(response.postId);
            }
        });
    }

    function createPostCommentVoteAsync(postId, commentId, voteType) {
        var vote = {
            voteType: voteType,
            postId: postId,
            commentId: commentId
        }
        $.ajax({
            url: "/Posts/CreatePostCommentVoteAsync",
            type: "POST",
            data: JSON.stringify(vote),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        $(`#${commentId} span[name=votes-count]:first`).text(response.votesCount);
                    }
                    break;
                }

            }
        });
    }

    function updatePostCommentsCountByPostId(postId) {
        $.ajax({
            url: `/Posts/CountPostCommentsByPostIdAsync/${postId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#comments-count").text(response.commentsCount);
            }
        });
    }
 
    $(document).ready(function() {
        $("#edit-tags").select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });

        $("#add-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $("#edit-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });
       
        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=addInputListeners" async defer></script>