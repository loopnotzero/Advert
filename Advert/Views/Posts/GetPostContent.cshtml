@using Advert.Models.Post
@model AggregatorViewModel

@await Html.PartialAsync("_Header", Model)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section id="@Model.Posts.First().PostId" name="post" class="content">
    <div class="row">
        <div class="col-md-8 p-2">
            <div class="card">
                <div class="card-header">
                    @await Html.PartialAsync("PostHeaderPartial", Model.Posts.First())
                </div>
                <div class="card-body">
                    @await Html.PartialAsync("PostContentPartial", Model.Posts.First())
                </div>
                <div class="card-footer">
                    @await Html.PartialAsync("PostFooterPartial", Model.Posts.First())
                </div>
                <div id="comment-form" class="p-4">
                    <textarea id="comment-editor__write--comment" style="display: none"></textarea>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button id="post-comment" class="btn btn-primary__advert waves-effect waves-light btn-sm">COMMENT</button>
                        </div>
                    </div>
                </div>
                <div id="post-comments" class="container-fluid">
                    @if (Model.PostComments != null && Model.PostComments.Any())
                    {
                        foreach (var comment in Model.PostComments)
                        {
                            <div id="@comment.CommentId" class="media p-2">
                                @if (!string.IsNullOrEmpty(comment.ProfileImagePath))
                                {
                                    <img class="card-user__img" src="@comment.ProfileImagePath" width="48" height="48" alt="profile-image">
                                }
                                else
                                {
                                    <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
                                }
                                <div class="media-body media__img content__break">
                                    <div class="col-auto">
                                        <span class="font-weight-bold" style="font-size: 0.8rem">
                                            <a href="/Profile/@comment.ProfileName">@comment.ProfileName</a>
                                        </span>
                                        <span class="time" style="font-size: 0.8rem"> @comment.CreatedAt</span>
                                    </div>
                                    <div class="col-auto media__border">
                                        <div class="media__comment">
                                            <h7>@Html.Raw(comment.Text)</h7>
                                        </div>
                                    </div>
                                    <div class="col-auto">
                                        <div class="r-btn r-btn-light r-btn--icon" onclick="onVotePostCommentClick('@comment.PostId', '@comment.CommentId', 1)">
                                            <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                        </div>
                                        <span name="votes-count">@comment.VotesCount</span>
                                        <span class="reply"></span> <a href="#reply" onclick="showReplyForm('@comment.PostId', null, '@comment.CommentId')">Reply</a>
                                    </div>
                                    <div id="reply-placeholder"></div>
                                    @if (comment.Comments != null)
                                    {
                                        foreach (var reply in comment.Comments)
                                        {
                                            <div id="@reply.CommentId" class="media p-2">
                                                @if (!string.IsNullOrEmpty(reply.ProfileImagePath))
                                                {
                                                    <img class="card-user__img" src="@reply.ProfileImagePath" width="48" height="48" alt="profile-image">
                                                }
                                                else
                                                {
                                                    <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
                                                }
                                                <div class="media-body media__img content__break">
                                                    <div class="col-auto">
                                                        <span class="font-weight-bold" style="font-size: 0.8rem">
                                                            <a href="/Profile/@reply.ProfileName">@reply.ProfileName</a>
                                                        </span>
                                                        <span class="time" style="font-size: 0.8rem"> @reply.CreatedAt</span>
                                                    </div>
                                                    <div class="col-auto media__border">
                                                        <div class="media__comment">
                                                            <h7>@Html.Raw(reply.Text)</h7>
                                                        </div>
                                                    </div>
                                                    <div class="col-auto">
                                                        <div class="r-btn r-btn-light r-btn--icon" onclick="onVotePostCommentClick('@reply.PostId', '@reply.CommentId', 1)">
                                                            <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                                        </div>
                                                        <span name="votes-count">@reply.VotesCount</span>
                                                        <span class="reply"></span> <a href="#reply" onclick="showReplyForm('@reply.PostId', '@reply.ReplyTo', '@reply.CommentId')">Reply</a>
                                                    </div>
                                                    <div id="reply-placeholder"></div>
                                                </div>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
        <div class="col-md-4 p-2">
            <div class="card p-4">
                <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;">
                    <h4 class="text-muted">Recommendations</h4>
                </div>
                @{
                    @await Html.PartialAsync("RecommendedPosts", Model.RecommendedPosts)
                }
            </div>
        </div>
    </div>
    @await Html.PartialAsync("AddPostModal")
    @await Html.PartialAsync("EditPostModal")
    @await Html.PartialAsync("DeletePostModal")
    @await Html.PartialAsync("EditPostTagsModal", Model.Posts.First())
</section>

<script>
    var editors = [
        new SimpleMDE({
            status: false,
            element: $("#post-editor__add--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        }),
        new SimpleMDE({
            status: false,
            element: $("#post-editor__edit--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        })
    ];

    var turndown = new TurndownService();

    //Fix for empty editors until it has no focus
    $('#add-post__modal').on('shown.bs.modal',
        function() {
            editors[0].codemirror.refresh();
        });

    //Fix for side by side & fullscreen
    editors[0].codemirror.on('refresh',
        function() {
            if (editors[0].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    $('#edit-post__modal').on('shown.bs.modal',
        function() {
            editors[1].codemirror.refresh();
        });

    editors[1].codemirror.on('refresh',
        function() {
            if (editors[1].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    function onAddPostClick() {
        $("#add-post__post").off("click").click(function() {
            var post = {
                text: editors[0].options.previewRender(editors[0].value()),
                title: $("#add-post__title").val(),
                price: $("#add-post__price").val(),
                location: $("#add-post__pac-input").val(),
                currency: $('#add-post__currency :selected').text()
            };
            createPostAsync(post,
                function(response) {
                    console.log("Close add post modal window");
                    $("#add-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#add-post__close").off("click").click(function() {
            if (editors[0].isFullscreenActive()) {
                editors[0].toggleFullScreen();
            }
        });
    }

    function onEditPostClick(postId) {
        getPostByIdAsync(postId,
            function(response) {
                console.log(`Set post title: ${response.title}`);
                $("#edit-post__title").val(response.title);
                console.log(`Set post price: ${response.price}`);
                $("#edit-post__price").val(response.price);
                console.log(`Set post location: ${response.location}`);
                $("#edit-post__pac-input").val(response.location);
                console.log(`Set post currency: ${response.currency}`);
                $('#edit-post__currency').val(response.currency).trigger('change');
                console.log(`Set post text: ${response.text}`);
                editors[1].value(turndown.turndown(response.text));
            });
        $("#edit-post__save").off("click").click(function() {
            var post = {
                text: editors[1].options.previewRender(editors[1].value()),
                title: $("#edit-post__title").val(),
                price: $("#edit-post__price").val(),
                location: $("#edit-post__pac-input").val(),
                currency: $('#edit-post__currency :selected').text()
            };
            updatePostByIdAsync(postId,
                post,
                function(response) {
                    console.log("Close edit post modal window");
                    $("#edit-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#edit-post__close").off("click").click(function() {
            if (editors[1].isFullscreenActive()) {
                editors[1].toggleFullScreen();
            }
        });
    }

    function onDeletePostClick(postId) {
        $("#delete-post__delete").off("click").click(function() {
            deletePostByIdAsync(postId,
                function(response) {
                    console.log("Close delete post modal window");
                    $("#delete-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
    }

    function onEditPostTagsClick(postId) {
        var tags = $(`#edit-tags__select--${postId}`);

        tags.select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });

        getPostTagsByPostIdAsync(postId,
            function(response) {
                console.log(`Response tags: ${response.tags}`);
                response.tags.forEach(function(element) {
                    var option = new Option(element, element, false, true);
                    tags.append(option);
                });
                tags.trigger('change');
            });

        $(`#edit-tags__save--${postId}`).off("click").click(function() {
            var postTags = {
                tags: $(`#edit-tags__select--${postId}`).val()
            };
            createPostTagsByPostIdAsync(postId,
                postTags,
                function(response) {
                    console.log("Close edit tags modal window");
                    $(`#edit-tags__modal--${postId}`).modal('toggle');
                    console.log("Clear tags on response");
                    tags.empty();
                });
        });

        $(`#edit-tags__close--${postId}`).off("click").click(function() {
            console.log("Clear tags on close");
            tags.empty();
        });

        $(`#edit-tags__cancel--${postId}`).off("click").click(function() {
            console.log("Clear tags on cancel");
            tags.empty();
        });
    }

    function addInputListeners() {
        var inputs = [
            document.getElementById('add-post__pac-input'),
            document.getElementById('edit-post__pac-input')
        ];
        for (var i = 0; i < inputs.length; i++) {
            var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
            autocomplete.addListener('place_changed',
                function() {
                    var place = autocomplete.getPlace();
//                    if (!place.geometry) {
//                        // User entered the name of a Place that was not suggested and
//                        // pressed the Enter key, or the Place Details request failed.
//                        window.alert("No details available for input: '" + place.name + "'");
//                        return;
//                    }
                });
        }
    }


    var commentEditor = new SimpleMDE({
        status: false,
        element: $("#comment-editor__write--comment")[0],
        placeholder: "Write something...",
        fullScreen: false,
        withPreview: false,
        spellChecker: false
    });

    function addCommentReply(comment) {
        createPostCommentAsync(comment,
            function(response) {
                $(`#${comment.replyTo} .media-body:first`).append(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath
                    }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time" style="font-size: 0.8rem"> ${response.createdAt}</span>  
                        </div>                        
                        <div class="col-auto media__border">
                            <div class="media__comment">
                                <h7>${response.text}</h7>
                            </div>             
                        </div>
                        <div class="col-auto">
                            <div class="r-btn r-btn-light r-btn--icon" onclick="onVotePostCommentClick('${
                    response.postId}', '${response.commentId}', 1)" >
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <a href="#reply" onclick="showReplyForm('${comment.postId}', '${comment.replyTo}', '${
                    response.commentId}')">Reply</a>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>
                `);

                $([document.documentElement, document.body]).animate({
                        scrollTop: $(`#${response.commentId}`).offset().top - 250
                    },
                    200);

                countPostCommentsByPostIdAsync(postId,
                    function(response) {
                        $(`#comments-count__${postId}`).text(response.commentsCount);
                    });
            });
    }

    function showReplyForm(postId, replyTo, commentId) {
        removeReplyForm("reply-form");

        $(`#${commentId} #reply-placeholder:first`).append(
            `<div id="reply-form">   
                <textarea id="reply-editor__write-reply" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">   
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>     
                        <input id="submit-reply" type="button" class="btn btn-primary__advert waves-effect waves-light btn-sm" value="Reply"/>
                    </div>    
                </div>
            </div>`
        );

        var replyEditor = new SimpleMDE({
            status: false,
            element: $("#reply-editor__write-reply")[0],
            placeholder: "Write reply...",
            fullScreen: false,
            withPreview: false,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $("#submit-reply").click(function() {
            removeReplyForm("reply-form");
            var text = replyEditor.options.previewRender(replyEditor.value());
            addCommentReply({
                text: text,
                postId: postId,
                replyTo: (replyTo == null ? commentId : replyTo),
            });
        });
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }

    function onVotePostCommentClick(postId, commentId, voteType) {
        var vote = {
            voteType: voteType,
        }
        createPostCommentVoteAsync(postId,
            commentId,
            vote,
            function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        $(`#${commentId} span[name=votes-count]:first`).text(response.votesCount);
                    }
                    break;
                }
            });
    }


    $(document).ready(function() {
        $("#post-comment").click(function() {
            var text = commentEditor.options.previewRender(commentEditor.value());
            var comment = {
                postId: postId,
                text: text
            }
            createPostCommentAsync(comment,
                function(response) {
                    $("#post-comments").prepend(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath
                        }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time"> ${response.createdAt}</span>         
                        </div>                        
                        <div class="col-auto media__border">
                            <div class="media__comment">
                                <h7>${response.text}</h7>
                            </div>   
                        </div>
                        <div class="col-auto">
                            <div class="r-btn r-btn-light r-btn--icon" onclick="onVotePostCommentClick('${
                        response.postId}', '${response.commentId}', 1)">
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <span name="votes-count">${response.votesCount}</span>
                            <a href="#reply" onclick="showReplyForm('${response.postId}', null, '${response.commentId
                        }')">Reply</a>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>`);

                    $([document.documentElement, document.body]).animate({
                            scrollTop: $(`#${response.commentId}`).offset().top - 250
                        },
                        200);

                    countPostCommentsByPostIdAsync(postId,
                        function(response) {
                            $(`#comments-count__${postId}`).text(response.commentsCount);
                        });
                });
            commentEditor.value("");
        });

        $("#add-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $("#edit-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');
    });
</script>

@* <script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=addInputListeners" async defer></script> *@