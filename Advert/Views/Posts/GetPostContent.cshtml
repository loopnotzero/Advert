@using Advert.Models.Post
@model AggregatorViewModel

@await Html.PartialAsync("_Header", Model)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section id="@Model.Posts.First().PostId" class="content">
    <div class="row">
        <div class="col-md-8 p-1">
            <div class="card">
                <div class="card-header">
                    @await Html.PartialAsync("PostHeaderPartial", Model.Posts.First())
                </div>
                <div class="card-body">
                    <h4 class="card-text__title font-weight-bold cut-long-text">@Model.Posts.First().Title</h4>
                    @await Html.PartialAsync("PostContentPartial", Model.Posts.First())
                </div>
                <div class="card-footer">
                    @await Html.PartialAsync("PostFooterPartial", Model.Posts.First())
                </div>
                <div id="comment-form" class="p-4">
                    <textarea id="comment-editor__write--comment" style="display: none"></textarea>
                    <div class="row mt-3">
                        <div class="col-12">
                            <button id="post-comment" class="btn btn-primary__advert waves-effect waves-light btn-sm">COMMENT</button>
                        </div>
                    </div>
                </div>
                <div id="post-comments" class="container-fluid">
                    @await Html.PartialAsync("PostCommentsPartial", Model.PostComments)
                </div>
            </div>
        </div>
        <div class="col-md-4 p-1">
            <div class="card p-4">
                <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;">
                    <h4 class="text-muted">Recommendations</h4>
                </div>
                @{
                    @await Html.PartialAsync("RecommendedPosts", Model.RecommendedPosts)
                }
            </div>
        </div>
    </div>
    @await Html.PartialAsync("AddPostModal")
    @await Html.PartialAsync("EditPostModal")
    @await Html.PartialAsync("DeletePostModal")
    @await Html.PartialAsync("EditPostTagsModal", Model.Posts.First())
</section>

<script>
    var editors = [
        new SimpleMDE({
            status: false,
            element: $("#post-editor__add--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        }),
        new SimpleMDE({
            status: false,
            element: $("#post-editor__edit--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        })
    ];

    var turndown = new TurndownService();

    //Fix for empty editors until it has no focus
    $('#add-post__modal').on('shown.bs.modal',
        function() {
            editors[0].codemirror.refresh();
        });

    //Fix for side by side & fullscreen
    editors[0].codemirror.on('refresh',
        function() {
            if (editors[0].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    $('#edit-post__modal').on('shown.bs.modal',
        function() {
            editors[1].codemirror.refresh();
        });

    editors[1].codemirror.on('refresh',
        function() {
            if (editors[1].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    function onAddPostClick() {
        $("#add-post__post").off("click").click(function() {
            var post = {
                text: editors[0].options.previewRender(editors[0].value()),
                title: $("#add-post__title").val(),
                price: $("#add-post__price").val(),
                location: $("#add-post__pac-input").val(),
                currency: $('#add-post__currency :selected').text()
            };
            createPostAsync(post,
                function(response) {
                    console.log("Close add post modal window");
                    $("#add-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#add-post__close").off("click").click(function() {
            if (editors[0].isFullscreenActive()) {
                editors[0].toggleFullScreen();
            }
        });
    }

    function onEditPostClick(postId) {
        getPostByIdAsync(postId,
            function(response) {
                console.log(`Set post title: ${response.title}`);
                $("#edit-post__title").val(response.title);
                console.log(`Set post price: ${response.price}`);
                $("#edit-post__price").val(response.price);
                console.log(`Set post location: ${response.location}`);
                $("#edit-post__pac-input").val(response.location);
                console.log(`Set post currency: ${response.currency}`);
                $('#edit-post__currency').val(response.currency).trigger('change');
                console.log(`Set post text: ${response.text}`);
                editors[1].value(turndown.turndown(response.text));
            });
        $("#edit-post__save").off("click").click(function() {
            var post = {
                text: editors[1].options.previewRender(editors[1].value()),
                title: $("#edit-post__title").val(),
                price: $("#edit-post__price").val(),
                location: $("#edit-post__pac-input").val(),
                currency: $('#edit-post__currency :selected').text()
            };
            updatePostByIdAsync(postId,
                post,
                function(response) {
                    console.log("Close edit post modal window");
                    $("#edit-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#edit-post__close").off("click").click(function() {
            if (editors[1].isFullscreenActive()) {
                editors[1].toggleFullScreen();
            }
        });
    }

    function onDeletePostClick(postId) {
        $("#delete-post__delete").off("click").click(function() {
            deletePostByIdAsync(postId,
                function(response) {
                    console.log("Close delete post modal window");
                    $("#delete-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
    }

        function onEditPostTagsClick(postId) {
        var tags = $(`#edit-tags__select--${postId}`);

        tags.select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });

        getPostTagsByPostIdAsync(postId,
            function(response) {
                console.log(`Response tags: ${response.tags}`);
                response.tags.forEach(function(element) {
                    var option = new Option(element, element, false, true);
                    tags.append(option);
                });
                tags.trigger('change');
            });

        $(`#edit-tags__save--${postId}`).off("click").click(function() {
            var postTags = {
                tags: $(`#edit-tags__select--${postId}`).val()
            };
            createPostTagsByPostIdAsync(postId,
                postTags,
                function(response) {
                    console.log("Close edit tags modal window");
                    $(`#edit-tags__modal--${postId}`).modal('toggle');

                    var tagsElement = $(`#post-header__tags--${postId}`);

                    tagsElement.empty();
                    
                    if (postTags.tags === null || postTags.tags.length == 0) {
                        tagsElement.append(`
                        <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                            <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>Add tags
                        </a>
                        `);
                    } else {
                        tagsElement.append(`
                            <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                                <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>
                            </a>
                        `);
                        var index = 0;
                        postTags.tags.forEach(function(tag) {
                            if (index++ == postTags.tags.length - 1) {
                                tagsElement
                                    .append(
                                        `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag}</a>`);
                            } else {
                                tagsElement
                                    .append(
                                        `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag}</a><span>, </span>`);
                            }
                        });
                    }

                    console.log("Clear tags on response");
                    tags.empty();
                });
        });

        $(`#edit-tags__close--${postId}`).off("click").click(function() {
            console.log("Clear tags on close");
            tags.empty();
        });

        $(`#edit-tags__cancel--${postId}`).off("click").click(function() {
            console.log("Clear tags on cancel");
            tags.empty();
        });
    }

    function addInputListeners() {
        var inputs = [
            document.getElementById('add-post__pac-input'),
            document.getElementById('edit-post__pac-input')
        ];
        for (var i = 0; i < inputs.length; i++) {
            var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
            autocomplete.addListener('place_changed',
                function() {
                    var place = autocomplete.getPlace();
//                    if (!place.geometry) {
//                        // User entered the name of a Place that was not suggested and
//                        // pressed the Enter key, or the Place Details request failed.
//                        window.alert("No details available for input: '" + place.name + "'");
//                        return;
//                    }
                });
        }
    }

    var commentEditor = new SimpleMDE({
        status: false,
        element: $("#comment-editor__write--comment")[0],
        placeholder: "Write something...",
        fullScreen: false,
        withPreview: false,
        spellChecker: false
    });

    $(document).ready(function() {
        $("#post-comment").click(function() {
            var postId = $("section").attr('id')
            var text = commentEditor.options.previewRender(commentEditor.value());
            var comment = {
                postId: postId,
                text: text
            }
            createPostCommentAsync(comment,
                function(response) {
                    $("#post-comments").prepend(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath}" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time"> ${response.createdAt}</span>         
                        </div>                        
                        <div class="col-auto media__border">
                            <div class="media__comment">
                                ${response.text}
                            </div>   
                        </div>
                        <div class="col-auto">
                            <div class="row">
                                <div class="col-md-12 p-1">
                                    <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onPostCommentVoteClick('${response.postId}', '${response.commentId}', 1)" >
                                        <i id="vote-icon__${response.commentId}" class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                    </div>
                                    <small id='votes-count__${response.commentId}'>${response.votesCount}</small>
                                    <span class="dot-separator"></span>
                                    <a href="#reply" onclick="onReplyCommentClick('${response.postId}', '${response.replyTo}', '${response.commentId}')" style="font-size: 0.8rem">
                                        Reply
                                    </a>
                                    <span class="dot-separator"></span>
                                    <div class="dropdown comments__item">
                                        <i data-toggle="dropdown" class="zmdi zmdi-chevron-down zmdi-hc-fw" aria-expanded="false"></i>
                                        <div class="dropdown-menu dropdown-menu-right" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(30px, 26px, 0px);">
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#edit-comment__modal--${response.commentId}" data-toggle="modal" onclick="onEditCommentClick('${response.commentId}')">
                                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i> Edit...
                                            </a> 
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#delete-comment__modal--${response.commentId}" data-toggle="modal" onclick="onDeleteCommentClick('${response.postId}', '${response.commentId}')">
                                                <i class="zmdi zmdi-delete zmdi-hc-fw"></i> Delete...
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>                          
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>`);

                    $([document.documentElement, document.body]).animate({
                            scrollTop: $(`#${response.commentId}`).offset().top - 250
                        },
                        200);
                });
            commentEditor.value("");
        });

        $("#add-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $("#edit-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');
    });
</script>

@* <script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=addInputListeners" async defer></script> *@