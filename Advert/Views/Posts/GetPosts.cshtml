@using Advert.Models.Post
@model PostsAggregatorViewModel


@await Html.PartialAsync("_Header", Model.Profile)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section class="content">
    <div class="row">
        <div class="col-md-3 p-1">
            @if (Model.Profile != null)
            {
                <div class="card team__item">
                    @await Html.PartialAsync("ProfilePartial", Model.Profile)
                </div>
            }        
        </div>
        
        <div class="@(Model.Profile != null ? "col-md-6" : "col-md-6") p-1">
            <div class="card">
                @foreach (var post in Model.Posts)
                {
                    <article id="@post.PostId" class="card-hover">
                        <div class="card-header">
                            @await Html.PartialAsync("PostHeaderPartial", post)
                        </div>
                        <div class="card-body">
                            <a href="/Posts?postId=@post.PostId">
                                <h4 class="card-text__title font-weight-bold cut-long-text">@post.Title</h4>
                            </a>
                            @await Html.PartialAsync("PostContentPartial", post)
                        </div>
                        <div class="card-footer">
                            @await Html.PartialAsync("PostFooterPartial", post)
                        </div>
                        <div style="border-bottom: 1px solid #d5d5d5;"></div>
                        @await Html.PartialAsync("EditPostTagsModal", post)
                    </article>
                }
            </div>
            @if (Model.LastPage > 1)
            {
                <div class="mt-4">
                    <nav>
                        <ul class="pagination justify-content-center">
                            @if (Model.CurrentPage > 1)
                            {
                                <li class="page-item pagination-first">
                                    <a class="page-link" href="/?page=1"></a>
                                </li>

                                <li class="page-item pagination-prev">
                                    <a class="page-link" href="/?page=@(Model.CurrentPage - 1)"></a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item pagination-first disabled">
                                    <a class="page-link" href="#"></a>
                                </li>

                                <li class="page-item pagination-prev disabled">
                                    <a class="page-link"></a>
                                </li>
                            }

                            @{
                                for (var index = Model.BeginPage; index <= Model.EndPage; index++)
                                {
                                    if (Model.CurrentPage == index)
                                    {
                                        <li class="page-item active">
                                            <a class="page-link" href="/?page=@index">@index</a>
                                        </li>
                                    }
                                    else
                                    {
                                        <li class="page-item">
                                            <a class="page-link" href="/?page=@index">@index</a>
                                        </li>
                                    }
                                }
                            }

                            @if (Model.CurrentPage >= Model.EndPage)
                            {
                                <li class="page-item pagination-next disabled">
                                    <a class="page-link" href="#"></a>
                                </li>

                                <li class="page-item pagination-last disabled">
                                    <a class="page-link" href="#"></a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item pagination-next">
                                    <a class="page-link" href="/?page=@(Model.CurrentPage + 1)"></a>
                                </li>

                                <li class="page-item pagination-last">
                                    <a class="page-link" href="/?page=@Model.LastPage"></a>
                                </li>
                            }
                        </ul>
                    </nav>
                </div>
            }
        </div>

@*         <div class="col-md-3 p-1"> *@
@*             <div class="card p-3"> *@
@*                 <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;"> *@
@*                     <h4 class="text-muted">Recommendations</h4> *@
@*                 </div> *@
@*                 @{ *@
@*                     @await Html.PartialAsync("RecommendedPosts", Model.RecommendedPosts) *@
@*                 } *@
@*             </div> *@
@*         </div> *@
    </div>
    @await Html.PartialAsync("LogInModal")
    @await Html.PartialAsync("SignUpModal")
    @await Html.PartialAsync("AddPostModal")
    @await Html.PartialAsync("EditPostModal")
    @await Html.PartialAsync("DeletePostModal")
</section>

<script>
    var addPostEditor = new SimpleMDE({
        status: false,
        element: $("#add-post__editor")[0],
        placeholder: "Write something...",
        fullScreen: false,
        withPreview: false,
        spellChecker: false
    });

    var editPostEditor = new SimpleMDE({
        status: false,
        element: $("#edit-post__editor")[0],
        placeholder: "Write something...",
        fullScreen: false,
        withPreview: false,
        spellChecker: false
    });

    var turndown = new TurndownService();

    //Fix for empty editors until it has no focus
    $('#add-post__modal').on('shown.bs.modal',
        function() {
            addPostEditor.codemirror.refresh();
        });

    //Fix for side by side & fullscreen
    addPostEditor.codemirror.on('refresh',
        function() {
            if (addPostEditor.isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    //Fix for empty editors until it has no focus
    $('#edit-post__modal').on('shown.bs.modal',
        function() {
            editPostEditor.codemirror.refresh();
        });

    //Fix for side by side & fullscreen
    editPostEditor.codemirror.on('refresh',
        function() {
            if (editPostEditor.isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    function onAddPostClick() {
        $("#add-post__post").off("click").click(function() {
            var post = {
                text: addPostEditor.options.previewRender(addPostEditor.value()),
                title: $("#add-post__title").val(),
                price: $("#add-post__price").val(),
                location: $("#add-post__pac-input").val(),
                currency: $('#add-post__currency :selected').text()
            };
            createPostAsync(post,
                function(response) {
                    console.log("Close add post modal window");
                    $("#add-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#add-post__close").off("click").click(function() {
            if (addPostEditor.isFullscreenActive()) {
                addPostEditor.toggleFullScreen();
            }
        });
    }

    function onEditPostClick(postId) {
        getPostByIdAsync(postId,
            function(response) {
                $("#edit-post__title").val(response.title);
                $("#edit-post__price").val(response.price);
                $("#edit-post__pac-input").val(response.location);
                $('#edit-post__currency').val(response.currency).trigger('change');
                editPostEditor.value(turndown.turndown(response.text));
            });
        $("#edit-post__save").off("click").click(function() {
            var post = {
                text: editPostEditor.options.previewRender(editPostEditor.value()),
                title: $("#edit-post__title").val(),
                price: $("#edit-post__price").val(),
                location: $("#edit-post__pac-input").val(),
                currency: $('#edit-post__currency :selected').text()
            };
            updatePostByIdAsync(postId,
                post,
                function(response) {
                    console.log("Close edit post modal window");
                    $("#edit-post__modal").modal('toggle');

                    console.log(
                        `MatchedCount: ${response.matchedCount} ModifiedCount: ${response.matchedCount
                        } IsAcknowledged: ${response.isAcknowledged} IsModifiedCountAvailable: ${response
                        .isModifiedCountAvailable}`);
                    
                    $(`#post-content__${postId}`).html(post.text);
                });
        });
        $("#edit-post__close").off("click").click(function() {
            if (editPostEditor.isFullscreenActive()) {
                editPostEditor.toggleFullScreen();
            }
        });
    }

    function onDeletePostClick(postId) {
        $("#delete-post__delete").off("click").click(function() {
            deletePostByIdAsync(postId,
                function(response) {
                    console.log("Close delete post modal window");
                    $("#delete-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
    }

    function onEditPostTagsClick(postId) {
        var tags = $(`#edit-tags__select--${postId}`);

        tags.select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });

        getPostTagsByPostIdAsync(postId,
            function(response) {
                console.log(`Response tags: ${response.tags}`);
                response.tags.forEach(function(element) {
                    var option = new Option(element, element, false, true);
                    tags.append(option);
                });
                tags.trigger('change');
            });

        $(`#edit-tags__save--${postId}`).off("click").click(function() {
            var postTags = {
                tags: $(`#edit-tags__select--${postId}`).val()
            };
            createPostTagsByPostIdAsync(postId,
                postTags,
                function(response) {
                    console.log("Close edit tags modal window");
                    $(`#edit-tags__modal--${postId}`).modal('toggle');

                    var tagsElement = $(`#post-header__tags--${postId}`);

                    tagsElement.empty();

                    if (postTags.tags === null || postTags.tags.length == 0) {
                        tagsElement.append(`
                        <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                            <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>Add tags
                        </a>
                        `);
                    } else {
                        tagsElement.append(`
                            <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                                <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>
                            </a>
                        `);
                        var index = 0;
                        postTags.tags.forEach(function(tag) {
                            if (index++ == postTags.tags.length - 1) {
                                tagsElement
                                    .append(
                                        `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag
                                        }</a>`);
                            } else {
                                tagsElement
                                    .append(
                                        `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag
                                        }</a><span>, </span>`);
                            }
                        });
                    }

                    console.log("Clear tags on response");
                    tags.empty();
                });
        });

        $(`#edit-tags__close--${postId}`).off("click").click(function() {
            console.log("Clear tags on close");
            tags.empty();
        });

        $(`#edit-tags__cancel--${postId}`).off("click").click(function() {
            console.log("Clear tags on cancel");
            tags.empty();
        });
    }

    function addInputListeners() {
        var inputs = [
            document.getElementById('add-post__pac-input'),
            document.getElementById('edit-post__pac-input')
        ];
        for (var i = 0; i < inputs.length; i++) {
            var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
            autocomplete.addListener('place_changed',
                function() {
//                    var place = autocomplete.getPlace();
//                    if (!place.geometry) {
//                        // User entered the name of a Place that was not suggested and
//                        // pressed the Enter key, or the Place Details request failed.
//                        window.alert("No details available for input: '" + place.name + "'");
//                        return;
//                    }
                });
        }   
    } 
</script>

@* <script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=addInputListeners" async defer></script> *@
