@using Advert.Models.Post
@model AggregatorViewModel

@await Html.PartialAsync("_Header", Model)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section class="content">
<div class="row">
<div class="col-md-3 p-1">
    <div class="card">
        <div class="card-body text-center">
            <a href="/Profile">
                @if (!string.IsNullOrEmpty(Model.Profile.ImagePath))
                {
                    <img src="@Model.Profile.ImagePath" class="widget-profile__img widget-profile__img__hover" alt="profile-image">
                }
                else
                {
                    <img src="/images/no_image.png" class="widget-profile__img widget-profile__img__hover" alt="profile-image">
                }
            </a>
            <a href="/Profile">
                <h5>@Model.Profile.Name</h5>
            </a>
            <div class="row">
                <div class="col-md-12">
                    <span class="text-justify">Posts</span>
                    <h5 class="text-center">@Model.Profile.PostsCount</h5>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-6 p-1">
    @{
        <div id="posts" class="card">
            @foreach (var post in Model.Posts)
            {
                <article id="@post.PostId" class="card-hover">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="card-user">
                                <div class="card-user__info">
                                    <a href="/Profiles/@post.ProfileId">
                                        <img src="@post.ProfileImagePath" class="card-user__img" alt="">
                                    </a>
                                    <div>
                                        <a href="/Profiles/@post.ProfileId">
                                            <div class="card-user__name">@post.ProfileName</div>
                                        </a>
                                        <div style="display: flex">
                                            <div class="post-header__time">@post.CreatedAt</div>
                                            <div class="post-header__tags">
                                                @if (post.Tags == null || post.Tags.Count == 0)
                                                {
                                                    <a href="" title="" data-placement="top" data-target="#edit-tags__modal--@post.PostId" data-toggle="modal" onclick="onEditPostTagsClick('@post.PostId')">
                                                        <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>Add tags
                                                    </a>
                                                }
                                                else
                                                {
                                                    <a href="" title="" data-placement="top" data-target="#edit-tags__modal--@post.PostId" data-toggle="modal" onclick="onEditPostTagsClick('@post.PostId')">
                                                        <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>
                                                    </a>

                                                    var index = 0;
                                                    
                                                    foreach (var tag in post.Tags)
                                                    {
                                                        if (index++ == post.Tags.Count - 1)
                                                        {
                                                            <a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=@tag">@tag</a> 
                                                        }
                                                        else
                                                        {
                                                            <a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=@tag">@tag</a><span>, </span>
                                                        }
                                                    }
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div style="text-align: right; padding-top: 1rem; padding-right: 1rem">
                                <ul class="list-inline">
                                    @if (post.IsTopicOwner)
                                    {
                                        <li class="list-inline-item" onclick="onEditPostClick('@post.PostId')">
                                            <a href="" title="" data-placement="top" data-target="#edit-post__modal" data-toggle="modal">
                                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i>
                                            </a>
                                        </li>
                                        <li class="list-inline-item" onclick="onDeletePostClick('@post.PostId')">
                                            <a href="" title="" data-placement="top" data-target="#delete-post__modal" data-toggle="modal">
                                                <i class="zmdi zmdi-delete zmdi-hc-fw"></i>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body card-body__img">
                        <a href="/Posts?postId=@post.PostId">
                            <h4 class="card-title font-weight-bold cut-long-text">@post.Title</h4>
                        </a>
                        <p>
                            @if (post.Price > 0)
                            {
                                <span style="font-size: 0.9rem; color: #71a830">@post.Price@post.Currency</span>
                            }
                            else
                            {
                                <span style="font-size: 0.9rem; color: #71a830">FREE</span>
                            }
                        </p>
                        <p>
                            @if (post.Location != null)
                            {
                                <i class="zmdi zmdi-pin zmdi-hc-fw"></i>
                                <span style="font-size: 0.9rem; color: #90949c">@post.Location</span>
                            }
                        </p>
                        @Html.Raw(post.Text)
                    </div>
                    <div class="row">
                        <div class="col-md-12 p-1">
                            <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onVotePostClick('@post.PostId', 1)">
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <small id="votes-count__@post.PostId">@post.LikesCount</small>

                            <div class="r-btn r-btn-light-no-hover r-btn--icon-no-hover">
                                <i class="zmdi zmdi-comments zmdi-hc-fw"></i>
                            </div>
                            <small id="comments-count__@post.PostId">@post.CommentsCount</small>

                            <div class="r-btn r-btn-light-no-hover r-btn--icon-no-hover">
                                <i class="zmdi zmdi-eye zmdi-hc-fw"></i>
                            </div>
                            <small id="post-views__count--@post.PostId">@post.ViewsCount</small>

                            <small class="text-muted float-right mt-2 mr-4">
                                <a href="/Posts?postId=@post.PostId">READ MORE...</a>
                            </small>
                        </div>
                    </div>
                    <div style="border-bottom: 1px solid #d5d5d5;"></div>
                    @await Html.PartialAsync("EditPostTagsModal", post)
                </article>
            }
        </div>
    }
    @if (Model.LastPage > 1)
    {
        <div class="mt-4">
            <nav>
                <ul class="pagination justify-content-center">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item pagination-first">
                            <a class="page-link" href="/?page=1"></a>
                        </li>

                        <li class="page-item pagination-prev">
                            <a class="page-link" href="/?page=@(Model.CurrentPage - 1)"></a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item pagination-first disabled">
                            <a class="page-link" href="#"></a>
                        </li>

                        <li class="page-item pagination-prev disabled">
                            <a class="page-link"></a>
                        </li>
                    }

                    @{
                        for (var index = Model.BeginPage; index <= Model.EndPage; index++)
                        {
                            if (Model.CurrentPage == index)
                            {
                                <li class="page-item active">
                                    <a class="page-link" href="/?page=@index">@index</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/?page=@index">@index</a>
                                </li>
                            }
                        }
                    }

                    @if (Model.CurrentPage >= Model.EndPage)
                    {
                        <li class="page-item pagination-next disabled">
                            <a class="page-link" href="#"></a>
                        </li>

                        <li class="page-item pagination-last disabled">
                            <a class="page-link" href="#"></a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item pagination-next">
                            <a class="page-link" href="/?page=@(Model.CurrentPage + 1)"></a>
                        </li>

                        <li class="page-item pagination-last">
                            <a class="page-link" href="/?page=@Model.LastPage"></a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>
<div class="col-md-3 p-1">
    <div class="card p-4">
        <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;">
            <h4 class="text-muted">Recommendations</h4>
        </div>
        @{
            @await Html.PartialAsync("RecommendedPosts", Model.RecommendedPosts)
        }
    </div>
</div>
</div>
@await Html.PartialAsync("AddPostModal")
@await Html.PartialAsync("EditPostModal")
@await Html.PartialAsync("DeletePostModal")
</section>

<script>
    var editors = [
        new SimpleMDE({
            status: false,
            element: $("#post-editor__add--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        }),
        new SimpleMDE({
            status: false,
            element: $("#post-editor__edit--post")[0],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        })
    ];

    var turndown = new TurndownService();

    //Fix for empty editors until it has no focus
    $('#add-post__modal').on('shown.bs.modal',
        function() {
            editors[0].codemirror.refresh();
        });

    //Fix for side by side & fullscreen
    editors[0].codemirror.on('refresh',
        function() {
            if (editors[0].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    $('#edit-post__modal').on('shown.bs.modal',
        function() {
            editors[1].codemirror.refresh();
        });

    editors[1].codemirror.on('refresh',
        function() {
            if (editors[1].isFullscreenActive()) {
                $('body').addClass('simplemde-fullscreen');
            } else {
                $('body').removeClass('simplemde-fullscreen');
            }
        });

    function onAddPostClick() {
        $("#add-post__post").off("click").click(function() {
            var post = {
                text: editors[0].options.previewRender(editors[0].value()),
                title: $("#add-post__title").val(),
                price: $("#add-post__price").val(),
                location: $("#add-post__pac-input").val(),
                currency: $('#add-post__currency :selected').text()
            };
            createPostAsync(post,
                function(response) {
                    console.log("Close add post modal window");
                    $("#add-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#add-post__close").off("click").click(function() {
            if (editors[0].isFullscreenActive()) {
                editors[0].toggleFullScreen();
            }
        });
    }

    function onEditPostClick(postId) {
        getPostByIdAsync(postId,
            function(response) {
                $("#edit-post__title").val(response.title);
                $("#edit-post__price").val(response.price);
                $("#edit-post__pac-input").val(response.location);
                $('#edit-post__currency').val(response.currency).trigger('change');
                editors[1].value(turndown.turndown(response.text));
                console.log(`Set post title: ${response.title}`);
                console.log(`Set post price: ${response.price}`);
                console.log(`Set post location: ${response.location}`);
                console.log(`Set post currency: ${response.currency}`);
                console.log(`Set post text: ${response.text}`);
            });
        $("#edit-post__save").off("click").click(function() {
            var post = {
                text: editors[1].options.previewRender(editors[1].value()),
                title: $("#edit-post__title").val(),
                price: $("#edit-post__price").val(),
                location: $("#edit-post__pac-input").val(),
                currency: $('#edit-post__currency :selected').text()
            };
            updatePostByIdAsync(postId,
                post,
                function(response) {
                    console.log("Close edit post modal window");
                    $("#edit-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
        $("#edit-post__close").off("click").click(function() {
            if (editors[1].isFullscreenActive()) {
                editors[1].toggleFullScreen();
            }
        });
    }

    function onDeletePostClick(postId) {
        $("#delete-post__delete").off("click").click(function() {
            deletePostByIdAsync(postId,
                function(response) {
                    console.log("Close delete post modal window");
                    $("#delete-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                });
        });
    }

    function onEditPostTagsClick(postId) {
        var tags = $(`#edit-tags__select--${postId}`);

        tags.select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });
        
        getPostTagsByPostIdAsync(postId,
            function(response) {
                console.log(`Response tags: ${response.tags}`);
                response.tags.forEach(function(element) {
                    var option = new Option(element, element, false, true);
                    tags.append(option);
                });
                tags.trigger('change');
            });

        $(`#edit-tags__save--${postId}`).off("click").click(function() {
            var postTags = {
                tags: $(`#edit-tags__select--${postId}`).val()
            };
            createPostTagsByPostIdAsync(postId,
                postTags,
                function(response) {
                    console.log("Close edit tags modal window");
                    $(`#edit-tags__modal--${postId}`).modal('toggle');
                    console.log("Clear tags on response");
                    tags.empty();
                });
        });

        $(`#edit-tags__close--${postId}`).off("click").click(function() {
            console.log("Clear tags on close");
            tags.empty();
        });

        $(`#edit-tags__cancel--${postId}`).off("click").click(function() {
            console.log("Clear tags on cancel");
            tags.empty();
        });
    }

    function onVotePostClick(postId, voteType) {
        var vote = {
            voteType: voteType
        };
        createPostVoteByPostIdAsync(postId,
            vote,
            function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        console.log(`Post id: ${postId} votes count: ${response.votesCount}`)
                        $(`#votes-count__${postId}`).text(response.votesCount);
                    }
                    break;
                }
            });
    }

    function addInputListeners() {
        var inputs = [
            document.getElementById('add-post__pac-input'),
            document.getElementById('edit-post__pac-input')
        ];
        for (var i = 0; i < inputs.length; i++) {
            var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
            autocomplete.addListener('place_changed',
                function() {
                    var place = autocomplete.getPlace();
//                    if (!place.geometry) {
//                        // User entered the name of a Place that was not suggested and
//                        // pressed the Enter key, or the Place Details request failed.
//                        window.alert("No details available for input: '" + place.name + "'");
//                        return;
//                    }
                });
        }
    }

    $(document).ready(function() {
        $("#add-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $("#edit-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });
    });
</script>

@* <script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=addInputListeners" async defer></script> *@
