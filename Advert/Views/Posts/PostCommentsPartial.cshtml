@using Advert.Models.Post
@model IEnumerable<PostCommentViewModel>

@if (Model != null)
{
    foreach (var comment in Model)
    {
        <div id="@comment.CommentId" class="media p-2">
            @if (!string.IsNullOrEmpty(comment.ProfileImagePath))
            {
                <img class="card-user__img" src="@comment.ProfileImagePath" width="48" height="48" alt="profile-image">
            }
            else
            {
                <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
            }
            <div class="media-body media__img content__break">
                <div class="col-auto">
                    <span class="font-weight-bold" style="font-size: 0.8rem">
                        <a href="/Profile/@comment.ProfileName">@comment.ProfileName</a>
                    </span>
                    <span class="time" style="font-size: 0.8rem"> @comment.CreatedAt</span>
                </div>
                <div class="col-auto media__border">
                    <div id="media-comment__@comment.CommentId" class="media__comment">
                        @Html.Raw(comment.Text)
                    </div>
                </div>
                <div class="col-auto">
                    <div class="row">
                        <div class="col-md-12 p-1">
                            <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onPostCommentVoteClick('@comment.PostId', '@comment.CommentId', 1)">
                                @if (comment.IsCommentVoted)
                                {
                                    <i id="vote-icon__@comment.CommentId" class="zmdi zmdi-favorite zmdi-hc-fw"></i>
                                }
                                else
                                {
                                    <i id="vote-icon__@comment.CommentId" class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                }
                            </div>
                            <small id="votes-count__@comment.CommentId">@comment.VotesCount</small>
                            <span class="dot-separator"></span>
                            <a href="#reply" onclick="onReplyCommentClick('@comment.PostId', null, '@comment.CommentId')" style="font-size: 0.8rem">
                                Reply
                            </a>
                            @if (comment.IsCommentOwner)
                            {
                                <span class="dot-separator"></span>
                                <div class="dropdown comments__item">
                                    <i data-toggle="dropdown" class="zmdi zmdi-chevron-down zmdi-hc-fw" aria-expanded="false"></i>
                                    <div class="dropdown-menu dropdown-menu-right" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(30px, 26px, 0px);">
                                        <a href="" class="dropdown-item" data-placement="top" data-target="#edit-comment__modal" data-toggle="modal" onclick="onEditCommentClick('@comment.PostId', '@comment.CommentId')">
                                            <i class="zmdi zmdi-edit zmdi-hc-fw"></i> Edit...
                                        </a>
                                        <a href="" class="dropdown-item" data-placement="top" data-target="#delete-comment__modal" data-toggle="modal" onclick="onDeleteCommentClick('@comment.PostId', '@comment.CommentId')">
                                            <i class="zmdi zmdi-delete zmdi-hc-fw"></i> Delete...
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
                <div id="reply-placeholder"></div>
                @if (comment.Comments != null)
                {
                    foreach (var reply in comment.Comments)
                    {
                        <div id="@reply.CommentId" class="media p-2">
                            @if (!string.IsNullOrEmpty(reply.ProfileImagePath))
                            {
                                <img class="card-user__img" src="@reply.ProfileImagePath" width="48" height="48" alt="profile-image">
                            }
                            else
                            {
                                <img class="card-user__img" src="/images/no_image.png" width="48" height="48" alt="profile-image">
                            }
                            <div class="media-body media__img content__break">
                                <div class="col-auto">
                                    <span class="font-weight-bold" style="font-size: 0.8rem">
                                        <a href="/Profile/@reply.ProfileName">@reply.ProfileName</a>
                                    </span>
                                    <span class="time" style="font-size: 0.8rem"> @reply.CreatedAt</span>
                                </div>
                                <div class="col-auto media__border">
                                    <div id="media-comment__@reply.CommentId" class="media__comment">
                                        @Html.Raw(reply.Text)
                                    </div>
                                </div>
                                <div class="col-auto">
                                    <div class="row">
                                        <div class="col-md-12 p-1">
                                            <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onPostCommentVoteClick('@reply.PostId', '@reply.CommentId', 1)">
                                                @if (reply.IsCommentVoted)
                                                {
                                                    <i id="vote-icon__@reply.CommentId" class="zmdi zmdi-favorite zmdi-hc-fw"></i>
                                                }
                                                else
                                                {
                                                    <i id="vote-icon__@reply.CommentId" class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                                }
                                            </div>
                                            <small id="votes-count__@reply.CommentId">@reply.VotesCount</small>
                                            <span class="dot-separator"></span>
                                            <a href="#reply" onclick="onReplyCommentClick('@reply.PostId', '@reply.ReplyTo', '@reply.CommentId')" style="font-size: 0.8rem">
                                                Reply
                                            </a>
                                            @if (reply.IsCommentOwner)
                                            {
                                                <span class="dot-separator"></span>
                                                <div class="dropdown comments__item">
                                                    <i data-toggle="dropdown" class="zmdi zmdi-chevron-down zmdi-hc-fw" aria-expanded="false"></i>
                                                    <div class="dropdown-menu dropdown-menu-right" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(30px, 26px, 0px);">
                                                        <a href="" class="dropdown-item" data-placement="top" data-target="#edit-comment__modal" data-toggle="modal" onclick="onEditCommentClick('@reply.PostId', '@reply.CommentId')">
                                                            <i class="zmdi zmdi-edit zmdi-hc-fw"></i> Edit...
                                                        </a>
                                                        <a href="" class="dropdown-item" data-placement="top" data-target="#delete-comment__modal" data-toggle="modal" onclick="onDeleteCommentClick('@reply.PostId', '@reply.CommentId')">
                                                            <i class="zmdi zmdi-delete zmdi-hc-fw"></i> Delete...
                                                        </a>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                                <div id="reply-placeholder"></div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
    @await Html.PartialAsync("EditCommentModal")
    @await Html.PartialAsync("DeleteCommentModal")
}

<script>
    var commentEditor = new SimpleMDE({
        status: false,
        element: $("#edit-comment__editor")[0],
        placeholder: "Write something...",
        fullScreen: false,
        withPreview: false,
        spellChecker: false
    });
    
    function onEditCommentClick(postId, commentId) {
        $("#edit-comment__modal").on('shown.bs.modal',
            function() {
                commentEditor.codemirror.refresh();
            });

        commentEditor.codemirror.on('refresh',
            function() {
                if (commentEditor.isFullscreenActive()) {
                    $('body').addClass('simplemde-fullscreen');
                } else {
                    $('body').removeClass('simplemde-fullscreen');
                }
            });

        getPostCommentAsync(postId,
            commentId,
            function(response) {
                console.log(`Set comment text: ${response.text}`);
                commentEditor.value(turndown.turndown(response.text));
            });

        $(`#edit-comment__save`).off("click").click(function() {
            var postComment = {
                text: commentEditor.options.previewRender(commentEditor.value()),
            };
            updatePostCommentAsync(postId,
                commentId,
                postComment,
                function(response) {
                    console.log("Close edit post comment modal window");
                    $(`#edit-post__modal--${commentId}`).modal('toggle');                    
                    console.log(`Update post comment result: ${response}`);
                    var comment = $(`#media-comment__${commentId}`);
                    comment.empty();
                    comment.append(postComment.text);
                });
            $("#edit-comment__modal").modal('toggle');
        });
        $("#edit-comment__close").off("click").click(function() {
            if (commentEditor.isFullscreenActive())
                commentEditor.toggleFullScreen();     
        });
    }

    function onReplyCommentClick(postId, replyTo, commentId) {
        removeReplyForm("reply-form");

        $(`#${commentId} #reply-placeholder:first`).append(
            `<div id="reply-form">   
                <textarea id="reply-commentEditor__write-reply" style="display: none"></textarea>    
                <div class="row mt-3">
                    <div class="col-12">   
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>     
                        <input id="submit-reply" type="button" class="btn btn-primary__advert waves-effect waves-light btn-sm" value="Reply"/>
                    </div>    
                </div>
            </div>`
        );

        var replyEditor = new SimpleMDE({
            status: false,
            element: $("#reply-commentEditor__write-reply")[0],
            placeholder: "Write reply...",
            fullScreen: false,
            withPreview: false,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $("#submit-reply").off("click").click(function() {
            removeReplyForm("reply-form");
            var text = replyEditor.options.previewRender(replyEditor.value());
            addCommentReply({
                text: text,
                postId: postId,
                replyTo: (replyTo == null ? commentId : replyTo),
            });
            replyEditor.toTextArea();
            replyEditor = null;
        });
    }

    function onDeleteCommentClick(postId, commentId) {
        $("#delete-comment__delete").off("click").click(function() {
            deletePostCommentAsync(postId,
                commentId,
                function(response) {
                    console.log(`Matched count: ${response.matchedCount}`);
                    console.log(`Modified count: ${response.modifiedCount}`);
                    console.log(`Is acknowledged: ${response.isAcknowledged}`);
                    console.log(`Is modified count available: ${response.isModifiedCountAvailable}`);
                    $(`#${commentId}`).empty();
                });
            $("#delete-comment__modal").modal('toggle');
        });
    }

    function addCommentReply(comment) {
        createPostCommentAsync(comment,
            function(response) {
                $(`#${comment.replyTo} .media-body:first`).append(`
                <div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profileImagePath
                    }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.8rem">
                                <a href="/Profile/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time" style="font-size: 0.8rem"> ${response.createdAt}</span>  
                        </div>                        
                        <div class="col-auto media__border">
                            <div id="media-comment_${response.commentId}" class="media__comment">
                                ${response.text}
                            </div>             
                        </div>
                        <div class="col-auto">
                            <div class="row">
                                <div class="col-md-12 p-1">
                                    <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onPostCommentVoteClick('${
                    response.postId}', '${response.commentId}', 1)" >
                                        <i id="vote-icon__${response.commentId
                    }" class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                    </div>
                                    <small id='votes-count__${response.commentId}'>${response.votesCount}</small>
                                    <span class="dot-separator"></span>
                                    <a href="#reply" onclick="onReplyCommentClick('${response.postId}', '${
                    response.replyTo}', '${response.commentId}')" style="font-size: 0.8rem">
                                        Reply
                                    </a>
                                    <span class="dot-separator"></span>
                                    <div class="dropdown comments__item">
                                        <i data-toggle="dropdown" class="zmdi zmdi-chevron-down zmdi-hc-fw" aria-expanded="false"></i>
                                        <div class="dropdown-menu dropdown-menu-right" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(30px, 26px, 0px);">
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#edit-comment__modal" data-toggle="modal" onclick="onEditCommentClick('${response.postId}', '${
                    response.commentId}')">
                                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i> Edit...
                                            </a> 
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#delete-comment__modal" data-toggle="modal" onclick="onDeleteCommentClick('${response.postId}', '${
                    response.commentId}')">
                                                <i class="zmdi zmdi-delete zmdi-hc-fw"></i> Delete...
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>
                `);

                $([document.documentElement, document.body]).animate({
                        scrollTop: $(`#${response.commentId}`).offset().top - 250
                    },
                    200);
            });
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }

    function onPostCommentVoteClick(postId, commentId, voteType) {
        var votesCount = $(`#votes-count__${commentId}`);
        var vote = {
            voteType: voteType,
            votesCount: votesCount.text()
        }
        createPostCommentVoteAsync(postId,
            commentId,
            vote,
            function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        console.log(`Post id: ${postId} votes count: ${response.votesCount}`)
                        var voteIcon = $(`#vote-icon__${commentId}`);
                        voteIcon.toggleClass('zmdi-favorite');
                        voteIcon.toggleClass('zmdi-favorite-outline');
                        votesCount.text(response.votesCount);
                    }
                    break;
                }
            });
    }
</script>