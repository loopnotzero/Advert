@using Advert.Models.AdsTopic
@model AggregatorViewModel

@await Html.PartialAsync("_Header", Model)

<style>
    .pac-container { z-index: 2000 !important; }
</style>

<section class="content">
<div class="row">
<div class="col-md-3 p-1">
    <div class="card">
        <div class="card-body text-center">
            <a href="/Profile">
                @if (!string.IsNullOrEmpty(Model.Profile.ImagePath))
                {
                    <img src="@Model.Profile.ImagePath" class="widget-profile__img widget-profile__img__hover" alt="profile-image">
                }
                else
                {
                    <img src="/images/no_image.png" class="widget-profile__img widget-profile__img__hover" alt="profile-image">
                }
            </a>
            <a href="/Profile">
                <h5>@Model.Profile.Name</h5>
            </a>
            <div class="row">
                <div class="col-md-12">
                    <span class="text-justify">Posts</span>
                    <h5 class="text-center">@Model.Profile.AdsTopicsCount</h5>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="col-md-6 p-1">
    @{
        <div id="ads-topics" class="card">
            @foreach (var adsTopic in Model.AdsTopics)
            {
                <article id="@adsTopic.AdsId" class="card-hover">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="card-user">
                                <div class="card-user__info">
                                    <a href="/Profiles/@adsTopic.ProfileId">
                                        <img src="@adsTopic.ProfileImagePath" class="card-user__img" alt="">
                                    </a>
                                    <div>
                                        <a href="/Profiles/@adsTopic.ProfileId">
                                            <div class="card-user__name">@adsTopic.ProfileName</div>
                                        </a>
                                        <div style="display: flex">
                                            <div class="post-header__time">@adsTopic.CreatedAt</div>
                                            <div class="post-header__tags">
                                                <a href="" title="" data-placement="top" data-target="#edit-tags__modal" data-toggle="modal" onclick="onEditPostTagsClick()">
                                                    <i class="zmdi zmdi-tag-more zmdi-hc-fw post-header__icon"></i>Edit tags
                                                </a>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div style="text-align: right; padding-top: 1rem; padding-right: 1rem">
                                <ul class="list-inline">
                                    @if (adsTopic.IsTopicOwner)
                                    {
                                        <li class="list-inline-item" onclick="onEditPostClick('@adsTopic.AdsId')">
                                            <a href="" title="" data-placement="top" data-target="#edit-post__modal" data-toggle="modal">
                                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i>
                                            </a>
                                        </li>
                                        <li class="list-inline-item" onclick="onDeletePostClick('@adsTopic.AdsId')">
                                            <a href="" title="" data-placement="top" data-target="#delete-post__modal" data-toggle="modal">
                                                <i class="zmdi zmdi-delete zmdi-hc-fw"></i>
                                            </a>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="card-body card-body__img">
                        <a href="/Topics/@adsTopic.AdsId">
                            <h4 class="card-title font-weight-bold cut-long-text">@adsTopic.Title</h4>
                        </a>
                        <p>
                            @if (adsTopic.Price > 0)
                            {
                                <span style="font-size: 0.9rem; color: #71a830">@adsTopic.Price@adsTopic.Currency</span>
                            }
                            else
                            {
                                <span style="font-size: 0.9rem; color: #71a830">FREE</span>
                            }
                        </p>
                        <p>
                            @if (adsTopic.Location != null)
                            {
                                <i class="zmdi zmdi-pin zmdi-hc-fw"></i>
                                <span style="font-size: 0.9rem; color: #90949c">@adsTopic.Location</span>
                            }
                        </p>
                        @Html.Raw(adsTopic.Text)
                    </div>
                    <div class="row">
                        <div class="col-md-12 p-1">
                            <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onVoteAdsTopicClick('@adsTopic.AdsId', 1)">
                                <i class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                            </div>
                            <small id="votes-count">@adsTopic.LikesCount</small>

                            <div class="r-btn r-btn-light-no-hover r-btn--icon-no-hover">
                                <i class="zmdi zmdi-comments zmdi-hc-fw"></i>
                            </div>
                            <small id="comments-count">@adsTopic.CommentsCount</small>

                            <div class="r-btn r-btn-light-no-hover r-btn--icon-no-hover">
                                <i class="zmdi zmdi-eye zmdi-hc-fw"></i>
                            </div>
                            <small id="ads-view-count">@adsTopic.ViewsCount</small>

                            <small class="text-muted float-right mt-2 mr-4">
                                <a href="/Topics/@adsTopic.AdsId">READ MORE...</a>
                            </small>
                        </div>
                    </div>
                    <div style="border-bottom: 1px solid #d5d5d5;"></div>
                </article>
            }
        </div>
    }
    @if (Model.LastPage > 1)
    {
        <div class="mt-4">
            <nav>
                <ul class="pagination justify-content-center">
                    @if (Model.CurrentPage > 1)
                    {
                        <li class="page-item pagination-first">
                            <a class="page-link" href="/?page=1"></a>
                        </li>

                        <li class="page-item pagination-prev">
                            <a class="page-link" href="/?page=@(Model.CurrentPage - 1)"></a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item pagination-first disabled">
                            <a class="page-link" href="#"></a>
                        </li>

                        <li class="page-item pagination-prev disabled">
                            <a class="page-link"></a>
                        </li>
                    }

                    @{
                        for (var index = Model.BeginPage; index <= Model.EndPage; index++)
                        {
                            if (Model.CurrentPage == index)
                            {
                                <li class="page-item active">
                                    <a class="page-link" href="/?page=@index">@index</a>
                                </li>
                            }
                            else
                            {
                                <li class="page-item">
                                    <a class="page-link" href="/?page=@index">@index</a>
                                </li>
                            }
                        }
                    }

                    @if (Model.CurrentPage >= Model.EndPage)
                    {
                        <li class="page-item pagination-next disabled">
                            <a class="page-link" href="#"></a>
                        </li>

                        <li class="page-item pagination-last disabled">
                            <a class="page-link" href="#"></a>
                        </li>
                    }
                    else
                    {
                        <li class="page-item pagination-next">
                            <a class="page-link" href="/?page=@(Model.CurrentPage + 1)"></a>
                        </li>

                        <li class="page-item pagination-last">
                            <a class="page-link" href="/?page=@Model.LastPage"></a>
                        </li>
                    }
                </ul>
            </nav>
        </div>
    }
</div>
<div class="col-md-3 p-1">
    <div class="card p-4">
        <div style="border-bottom: 1px solid #d5d5d5; margin-bottom: 10px;">
            <h4 class="text-muted">Recommendations</h4>
        </div>
        @{
            @await Html.PartialAsync("RecommendedAdsTopics", Model.RecommendedAdsTopics)
        }
    </div>
</div>
</div>

@await Html.PartialAsync("AddPostModal")
@await Html.PartialAsync("EditPostModal")
@await Html.PartialAsync("DeletePostModal")
@await Html.PartialAsync("EditTagsModal")

</section>

<script>
    var editors = [
        $("#post-editor__add--post")[0], $("#post-editor__edit--post")[0]
    ];

    for (var i = 0; i < editors.length; i++) {
        var postEditor = new SimpleMDE({
            status: false,
            element: editors[i],
            placeholder: "Write something...",
            fullScreen: false,
            withPreview: false,
            spellChecker: false
        });
    }

    var turndown = new TurndownService();
    

    function onAddPostClick() {
        exitPostEditorFullScreen();
        $("#add-post__post").click(function() {
            var ads = JSON.stringify({
                text: postEditor.options.previewRender(postEditor.value()),
                title: $("#add-post__title").val(),
                price: $("#add-post__price").val(),
                location: $("#add-post__pac-input").val(),
                currency: $('#add-post__currency :selected').text()
            });
            $.ajax({
                url: "/Topics/CreateAdsTopicAsync",
                type: "POST",
                data: ads,
                contentType: "application/json",
                error: function() {
                    console.log("jqXhr: " + jqXhr);
                    console.log("textStatus: " + textStatus);
                    console.log("errorThrown: " + errorThrown);
                },
                success: function(response) {
                    $("#add-post__modal").modal('toggle');
                    window.location.replace(response.returnUrl);
                }
            });
        });
    }

    function onEditPostClick(adsId) {
        exitPostEditorFullScreen();
        $.ajax({
            url: `/Topics/GetAdsTopicByIdAsync/${adsId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#edit-post__title").val(response.title);
                $("#edit-post__price").val(response.price);
                $("#edit-post__pac-input").val(response.location);
                $('#edit-post__currency').val(response.currency).trigger('change');
                postEditor.value(turndown.turndown(response.text));
            }
        });
        $("#edit-post__save").click(function() {
            onSavePostChangesClick(adsId);
        });
    }

    function onDeletePostClick(adsId) {
        $("#delete-post__delete").click(function() {
            $.ajax({
                url: `/Topics/DeleteAdsTopicByIdAsync/${adsId}`,
                type: "DELETE",
                contentType: "application/json",
                error: function() {
                    console.log("jqXhr: " + jqXhr);
                    console.log("textStatus: " + textStatus);
                    console.log("errorThrown: " + errorThrown);
                },
                success: function(response) {
                    $("#delete-post__modal").modal('toggle');
                    window.location.replace(response.returnUrl);
                }
            });
        });
    }

    function onSavePostChangesClick(adsId) {
        var ads = JSON.stringify({
            text: postEditor.options.previewRender(postEditor.value()),
            title: $("#edit-post__title").val(),
            price: $("#edit-post__price").val(),
            location: $("#edit-post__pac-input").val(),
            currency: $('#edit-post__currency :selected').text()
        });
        $.ajax({
            url: `/Topics/UpdateAdsTopicByIdAsync/${adsId}`,
            type: "POST",
            data: ads,
            contentType: "application/json",
            error: function() {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                $("#edit-post__modal").modal('toggle');
                window.location.replace(response.returnUrl);
            }
        });
    }
    
    function onEditPostTagsClick() {
        exitPostEditorFullScreen();
        $.ajax({
            url: `/Topics/GetAdsTopicTagsByAdsIdAsync/${adsId}`,
            type: "GET",
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                //todo: Set tags
            }
        });
    }

    function onVoteAdsTopicClick(adsId, voteType) {
        var vote = {
            adsId: adsId,
            voteType: voteType
        }
        $.ajax({
            url: "/Topics/CreateAdsTopicVoteAsync",
            type: "POST",
            data: JSON.stringify(vote),
            contentType: "application/json",
            error: function(jqXhr, textStatus, errorThrown) {
                console.log("jqXhr: " + jqXhr);
                console.log("textStatus: " + textStatus);
                console.log("errorThrown: " + errorThrown);
            },
            success: function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        $(`#${adsId} small[id=votes-count]`).text(response.votesCount);
                    }
                    break;
                }
            }
        });
    }

    function exitPostEditorFullScreen() {
        if (postEditor.isFullscreenActive()) {
            postEditor.exitPostEditorFullScreen();
        }
    }

    function addACInputListeners() {
        var inputs = [
            document.getElementById('add-post__pac-input'),
            document.getElementById('edit-post__pac-input')
        ];

        for (var i = 0; i < inputs.length; i++) {
            var autocomplete = new google.maps.places.Autocomplete(inputs[i]);
            autocomplete.addListener('place_changed',
                function() {
                    var place = autocomplete.getPlace();
                    if (!place.geometry) {
                        // User entered the name of a Place that was not suggested and
                        // pressed the Enter key, or the Place Details request failed.
                        window.alert("No details available for input: '" + place.name + "'");
                        return;
                    }
                });
        }
    }
    

    $(document).ready(function() {
        $("#edit-tags").select2({
            tags: true,
            width: "100%",
            placeholder: "Choose up to 5 tags to describe this post.",
            tokenSeparators: [',', ' '],
            maximumSelectionLength: 5,
        });

        $("#add-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        $("#edit-post__currency").select2({
            tags: ["€", "$", "MDL"],
            width: "100%",
            height: "34px",
            minimumResultsForSearch: -1,
        });

        //Fix for side by side & fullscrenn
        postEditor.codemirror.on('refresh',
            function() {
                if (postEditor.isFullscreenActive()) {
                    $('body').addClass('simplemde-fullscreen');
                } else {
                    $('body').removeClass('simplemde-fullscreen');
                }
            });

        //Fix for empty postEditor until it has no focus
        $('#add-post__modal').on('shown.bs.modal',
            function() {
                postEditor.codemirror.refresh();
            });

        $('#edit-post__modal').on('shown.bs.modal',
            function() {
                postEditor.codemirror.refresh();
            });
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=@Model.ExternalKeys.ACKey&libraries=places&callback=addACInputListeners" async defer></script>
