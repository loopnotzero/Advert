<!DOCTYPE html>
<html>
<head>
    <title>Bazaar.md</title>
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"/>
    <meta content="A fully featured admin theme which can be used to build CRM, CMS, etc." name="description"/>
    <meta content="Advert" name="author"/>
    <meta http-equiv="X-UA-Compatible" content="IE=edge"/>
    <link rel="shortcut icon" href="~/assets/favicon.ico">
    <link href="~/css/dropzone.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/font.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/bootstrap.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/style.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/simplemde.min.css" rel="stylesheet" type="text/css">
    <link href="~/css/animate.min.css" rel="stylesheet" type="text/css">
    <link href="~/css/tagify.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/cropper.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/flatpickr.min.css" rel="stylesheet" type="text/css"/>
    <link href="~/css/nanogallery2.min.css" rel="stylesheet" type="text/css"/>
</head>
<body id="body" data-ma-theme="advert" style="display: none">
@RenderBody()
@Html.AntiForgeryToken()
</body>
</html>
<script src="~/js/popper.min.js"></script>
<script src="~/js/jquery.min.js"></script>
<script src="~/js/bootstrap.min.js"></script>
<script src="~/js/waves.min.js"></script>
<script src="~/js/turndown.min.js"></script>
<script src="~/js/simplemde.min.js"></script>
<script src="~/js/dropzone.min.js"></script>
<script src="~/js/bazaar.min.js"></script>
<script src="~/js/jquery.tagify.min.js"></script>
<script src="~/js/cropper.min.js"></script>
<script src="~/js/jquery-cropper.min.js"></script>
<script src="~/js/flatpickr.min.js"></script>
<script src="~/js/jquery.nanogallery2.min.js"></script>

<script>
    var turndown = new TurndownService();
    var textEditor = {};
    
    Dropzone.autoDiscover = false;
    
    if (document.getElementById("edit__profile--add__photo")) {
        var dzProfilePhoto = new Dropzone("#edit__profile--add__photo",
            {
                url: "/Profile/AddProfilePhotoAsync",
                maxFiles: 1,
                acceptedFiles: "image/*",
                autoProcessQueue: false,
                init: function() {
                    this.on("success",
                        function(file, response) {
                            $("#profile-image").attr("src", `${response.profilePhoto}?${new Date().getTime()}`);
                            $(`img[photo-id='${response.profileName}']`).attr("src", `${response.profilePhoto}?${new Date().getTime()}`);
                            $("#edit__profile--modal").modal('toggle');
                        });
                    this.on("addedfile",
                        function(file) {
                            $("#edit__profile--photo").attr('src', URL.createObjectURL(file)).cropper({
                                aspectRatio: 1,
                                dragMode: 'move',
                                cropBoxMovable: false,
                                cropBoxResizable: false,
                                minCropBoxWidth: 175,
                                minCropBoxHeight: 175
                            });
                            $("#profile__photo-form__group").show();
                        });
                    this.on("removedfile",
                        function(file) {
                            if (this.getAcceptedFiles().length === 0) {
                                $("#edit__profile--photo").removeAttr("src").cropper("destroy");
                                $("#profile__photo-form__group").hide();
                            }
                        });
                    this.on("maxfilesexceeded",
                        function(file) {
                            this.removeFile(file);
                        });
                }
            });
    }

    function toBlob(uri) {
        var byteString = atob(uri.split(',')[1]);
        var arrayBuffer = new ArrayBuffer(byteString.length);
        var byteArray = new Uint8Array(arrayBuffer);
        for (var i = 0; i < byteString.length; i++) {
            byteArray[i] = byteString.charCodeAt(i);
        }
        return new Blob([arrayBuffer], { type: 'image/jpeg' });
    }

    function initMap() {
        if ($("#add__post--location").length) {
            new google.maps.places.Autocomplete($("#add__post--location")[0])
                .addListener('place_changed',
                    function() {

                    });
        }

        if ($("#edit__post--location").length) {
            new google.maps.places.Autocomplete($("#edit__post--location")[0])
                .addListener('place_changed',
                    function() {

                    });
        }

        if ($("#edit__profile--location").length) {
            new google.maps.places.Autocomplete($("#edit__profile--location")[0])
                .addListener('place_changed',
                    function() {

                    });
        }
    }

    function removeReplyForm(commentId) {
        var form = $(`#${commentId}`);
        if (form.length !== 0) {
            form.remove();
        }
    }

    function renderCommentForm(response) {
        var html = `<div id="${response.commentId}" class="media p-2">
                    <img class="card-user__img" src="${response.profilePhoto
            }" width="48" height="48" alt="profile-image">
                    <div class="media-body media__img content__break">
                        <div class="col-auto">
                            <span class="font-weight-bold" style="font-size: 0.9rem">
                                <a href="/${response.profileName}">${response.profileName}</a>
                            </span>
                            <span class="time" style="font-size: 0.9rem"> ${response.createdAt}</span>  
                        </div>                        
                        <div class="col-auto media__border">
                            <div id="media-comment__${response.commentId}" class="media__comment">${response.text}
                            </div>             
                        </div>
                        <div class="col-auto">
                            <div class="row">
                                <div class="col-md-12 p-1">
                                    <div class="r-btn r-btn-light r-btn--icon waves-effect ml-4" onclick="onPostCommentVoteClick('${
            response.postId}', '${response.commentId}', 1)" >
                                        <i id="vote-icon__${response.commentId
            }" class="zmdi zmdi-favorite-outline zmdi-hc-fw"></i>
                                    </div>
                                    <small id='votes-count__${response.commentId}'>${response.votesCount}</small>
                                    <span class="dot-separator"></span>        
                                    <a href="#reply" onclick="onReplyCommentClick('${response.postId}', ${
            response.replyTo === null ? null : `'${response.replyTo}'`}, '${response.commentId
            }')" style="font-size: 0.9rem">
                                        Reply
                                    </a>      
                                    <span class="dot-separator"></span>
                                    <div class="dropdown comments__item">
                                        <i data-toggle="dropdown" class="zmdi zmdi-chevron-down zmdi-hc-fw" aria-expanded="false"></i>
                                        <div class="dropdown-menu dropdown-menu-right" x-placement="bottom-end" style="position: absolute; will-change: transform; top: 0px; left: 0px; transform: translate3d(30px, 26px, 0px);">
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#edit-comment__modal" data-toggle="modal" onclick="onEditCommentClick('${
            response.postId}', '${response.commentId}')">
                                                <i class="zmdi zmdi-edit zmdi-hc-fw"></i> Edit...
                                            </a> 
                                            <a href="" class="dropdown-item" data-placement="top" data-target="#delete-comment__modal" data-toggle="modal" onclick="onDeleteCommentClick('${
            response.postId}', '${response.commentId}')">
                                                <i class="zmdi zmdi-delete zmdi-hc-fw"></i> Delete...
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div id="reply-placeholder"></div>
                    </div>
                </div>`;
        return html;
    }

    function onLogInClick() {
        var model = {
            email: $("#log-in__email").val(),
            password: $("#log-in__password").val()
        };

        var token = $("input[name=__RequestVerificationToken]").val();
        console.log(`Token: ${token}`);

        var headers = {};

        if (token) {
            headers["RequestVerificationToken"] = token;
        }

        logInByEmailAsync(model,
            headers,
            function(response) {
                if (response.errors != null && response.errors.length > 0) {
                    $("#log-in__alert").show().text(response.errors.map(function(element) {
                        return element.description;
                    }).join(","));
                } else {
                    window.location.replace(response.returnUrl);
                }
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
    }

    function onSignUpClick() {
        var model = {
            name: $("#sign-up__name").val(),
            email: $("#sign-up__email").val(),
            password: $("#sign-up__password").val(),
            culture: navigator.language
        };

        var token = $("input[name=__RequestVerificationToken]").val();

        var headers = {};

        if (token) {
            headers["RequestVerificationToken"] = token;
        }

        createNewAccountAsync(model,
            headers,
            function(response) {
                if (response.errors != null && response.errors.length > 0) {
                    $("#sign-up__alert").show().text(response.errors.map(function(element) {
                        return element.description;
                    }).join(","));
                } else {
                    console.log("Close sign up modal")
                    $("#sign-up__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                }
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
    }

    function onAddPostClick() {
        var dzPhotos = new Dropzone("#add__post--add__photos",
            {
                url: "/Posts/AddPostPhotosAsync",
                maxFiles: 10,
                acceptedFiles: "image/*",
                autoProcessQueue: false,
                init: function() {
                    this.on("success",
                        function(file, response) {
                            console.log("success");
                        });
                    this.on("addedfile",
                        function(file) {
                            console.log("addedfile");
                        });
                    this.on("removedfile",
                        function(file) {
                            console.log("removedfile");
                        });
                    this.on("maxfilesexceeded",
                        function(file) {
                            this.removeFile(file);
                        });
                }
            });
        
        $("#add__post--post").off("click").click(function() {
            var post = {
                text: textEditor["add__post--text__editor"].options.previewRender(textEditor["add__post--text__editor"].value()),
                title: $("#add__post--title").val(),
                price: $("#add__post--price").val(),
                location: $("#add__post--location").val(),
                currency: $('#add__post--currency option:selected').text()
            };
            createPostAsync(post,
                function(response) {
                    dzPhotos.url = `/Posts/AddPostPhotosAsync?postId=${response.postId}`;
                    dzPhotos.processQueue();
                    $("#add__post--modal").modal('toggle');
                    window.location.replace(`/Posts?postId=${response.postId}`);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
        });
        
        $("#add-post__close").off("click").click(function() {
            if (textEditor["add__post--text__editor"].isFullscreenActive()) {
                textEditor["add__post--text__editor"].toggleFullScreen();
            }
        });        
    }

    function onVotePostClick(postId, voteType) {
        var votesCount = $(`#votes-count__${postId}`);
        var vote = {
            voteType: voteType,
            votesCount: votesCount.text()
        };
        createPostVoteIdAsync(postId,
            vote,
            function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        console.log(`Votes count: ${response.votesCount}`)
                        $(`#vote-icon__${postId}`).toggleClass('zmdi-favorite').toggleClass('zmdi-favorite-outline');
                        votesCount.text(response.votesCount);
                    }
                    break;
                }
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
    }

    function onEditPostClick(postId) {
        getPostByIdAsync(postId,
            function(response) {
                $("#edit-post__title").val(response.title);
                $("#edit-post__price").val(response.price);
                $("#edit__post--location").val(response.location);
                $('#edit__post--currency').val(response.currency).trigger('change');
                textEditor["edit__post--text__editor"].value(turndown.turndown(response.text));
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
        $("#edit-post__save").off("click").click(function() {
            var post = {
                text: textEditor["edit__post--text__editor"].options.previewRender(textEditor["edit__post--text__editor"]
                    .value()),
                title: $("#edit-post__title").val(),
                price: $("#edit-post__price").val(),
                location: $("#edit__post--location").val(),
                currency: $('#edit__post--currency option:selected').text()
            };

            console.log("Currency: " + post.currency);

            updatePostByIdAsync(postId,
                post,
                function(response) {
                    console.log("Close edit post modal window");
                    $("#edit-post__modal").modal('toggle');
                    $(`#post-title__${postId}`).text(post.title);
                    $(`#post-price__${postId}`).text(`${post.price}${post.currency}`);
                    $(`#post-location__${postId}`).text(post.location);
                    $(`#post-text__${postId}`).html(post.text);
                    console.log(
                        `MatchedCount: ${response.matchedCount} ModifiedCount: ${response.matchedCount
                        } IsAcknowledged: ${response.isAcknowledged} IsModifiedCountAvailable: ${response
                        .isModifiedCountAvailable}`);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
        });
        $("#edit-post__close").off("click").click(function() {
            if (textEditor["edit__post--text__editor"].isFullscreenActive()) {
                textEditor["edit__post--text__editor"].toggleFullScreen();
            }
        });
    }

    function onDeletePostClick(postId) {
        $("#delete-post__delete").off("click").click(function() {
            deletePostByIdAsync(postId,
                function(response) {
                    console.log("Close delete post modal window");
                    $("#delete-post__modal").modal('toggle');
                    console.log(`Redirect to URL: ${response.returnUrl}`);
                    window.location.replace(response.returnUrl);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
        });
    }

    function onEditPostTagsClick(postId) {
        var $input = $(`#edit-tags__input--${postId}`).tagify({
            maxTags: 5,
            whitelist: [
                { "id": 1, "value": "some string" }
            ],
        });

        var tagify = $input.data('tagify');

        getPostTagsByPostIdAsync(postId,
            function(response) {
                console.log(`Response tags: ${response.tags}`);
                tagify.addTags(response.tags);
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });

        $(`#edit-tags__save--${postId}`).off("click").click(function() {
            var tags = tagify.value;

            var postTags = {
                tags: tags.map(function(element) {
                    return element.value;
                })
            };

            console.log(`Tags: ${postTags.tags}`);

            createPostTagsByPostIdAsync(postId,
                postTags,
                function(response) {
                    console.log("Close edit tags modal window");
                    $(`#edit-tags__modal--${postId}`).modal('toggle');

                    var tagsElement = $(`#post-header__tags--${postId}`);

                    tagsElement.empty();

                    if (postTags.tags === null || postTags.tags.length == 0) {
                        tagsElement.append(`
                        <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                            <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>Add tags
                        </a>
                        `);
                    } else {
                        tagsElement.append(`
                            <a href="" title="" data-placement="top" data-target="#edit-tags__modal--${postId
                            }" data-toggle="modal" onclick="onEditPostTagsClick('${postId}')">
                                <i class="zmdi zmdi-tag-more zmdi-hc-fw post-tag__icon"></i>
                            </a>
                        `);
                        var index = 0;
                        postTags.tags.forEach(function(tag) {
                            if (index++ === postTags.tags.length - 1) {
                                tagsElement.append(
                                    `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag}</a>`);
                            } else {
                                tagsElement.append(
                                    `<a class="post-tag__link" href="/Posts/GetPostsByTag?tagName=${tag}">${tag
                                    }</a><span>, </span>`);
                            }
                        });
                    }

                    console.log("Clear tags on response");
                    tagify.removeAllTags();
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
        });

        $(`#edit-tags__close--${postId}`).off("click").click(function() {
            console.log("Clear tags on close");
            tagify.removeAllTags();
        });

        $(`#edit-tags__cancel--${postId}`).off("click").click(function() {
            console.log("Clear tags on cancel");
            tagify.removeAllTags();
        });
    }

    function onEditCommentClick(postId, commentId) {
        getPostCommentAsync(postId,
            commentId,
            function(response) {
                console.log(`Set comment text: ${response.text}`);
                textEditor["edit__comment--text__editor"].value(turndown.turndown(response.text));
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });

        $(`#edit-comment__save`).off("click").click(function() {
            var postComment = {
                text: textEditor["edit__comment--text__editor"].options.previewRender(textEditor["edit__comment--text__editor"].value())
            };
            updatePostCommentAsync(postId,
                commentId,
                postComment,
                function(response) {
                    console.log("Close edit post comment modal window");
                    $(`#edit-post__modal--${commentId}`).modal('toggle');
                    console.log(
                        `MatchedCount: ${response.matchedCount} ModifiedCount: ${response.matchedCount
                        } IsAcknowledged: ${response.isAcknowledged} IsModifiedCountAvailable: ${response
                        .isModifiedCountAvailable}`);
                    var comment = $(`#media-comment__${commentId}`);
                    comment.empty();
                    comment.append(postComment.text);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
            $("#edit-comment__modal").modal('toggle');
        });
        $("#edit-comment__close").off("click").click(function() {
            if (textEditor["edit__comment--text__editor"].isFullscreenActive()) {
                textEditor["edit__comment--text__editor"].toggleFullScreen();
            }
        });
    }

    function onEditProfileSaveChangesClick(profileId) {
        var tabId = $(".tab-content").find(".active").attr('id');
        switch (tabId) {
        case "edit__profile--tab":
            {
                var birthday = $("#edit__profile--birthday").val();
                var genderType = $("#edit__profile--gender:selected");
                var callingCode = $("#edit__profile--calling__code option:selected");

                var profile = {
                    gender: genderType.index() === 0 ? null : genderType.text(),
                    birthday: birthday === "" ? null : birthday,
                    location: $("#edit__profile--location").val(),
                    callingCode: callingCode.index() === 0 ? null : callingCode.text().match("(\\+\\d+)")[0],
                    phoneNumber: $("#edit__profile--phone__number").val()
                }

                updateProfileByIdAsync(profileId,
                    profile,
                    function(response) {
                        console.log(
                            `MatchedCount: ${response.matchedCount} ModifiedCount: ${response.matchedCount
                            } IsAcknowledged: ${response.isAcknowledged} IsModifiedCountAvailable: ${response
                            .isModifiedCountAvailable}`);

                        var monthNames = [
                            "January", "February", "March",
                            "April", "May", "June",
                            "July", "August", "September",
                            "October", "November", "December"
                        ];

                        if (profile.location === null || profile.location === "") {
                            $("#profile-location").empty();
                        } else {
                            $("#profile-location")
                                .html(`<span><i class="zmdi zmdi-pin zmdi-hc-fw"></i>${profile.location}</span>`);
                        }

                        if (profile.birthday === null || profile.birthday === "") {
                            $("#profile-birthday").empty();
                        } else {
                            var date = new Date(profile.birthday);
                            $("#profile-birthday")
                                .html(`<span><i class="zmdi zmdi-brightness-5 zmdi-hc-fw"></i>Birthday ${`${
                                    date.getDate()} ${monthNames[date.getMonth()]} ${date.getFullYear()}`}</span>`);
                        }

                        if (profile.callingCode === null ||
                            profile.callingCode === "" ||
                            profile.phoneNumber === null ||
                            profile.phoneNumber === "") {
                            $("#profile-phone__number").empty();
                        } else {
                            $("#profile-phone__number")
                                .html(`<span><i class="zmdi zmdi-smartphone-iphone zmdi-hc-fw"></i>${profile.callingCode
                                    } ${profile.phoneNumber}</span>`);
                        }

                        if (!dzProfilePhoto.getAcceptedFiles().length) {
                            $("#edit__profile--modal").modal('toggle');
                        } else {
                            var target = toBlob($("#edit__profile--photo").cropper('getCroppedCanvas').toDataURL());
                            dzProfilePhoto.removeFile(dzProfilePhoto.getAcceptedFiles()[0]);
                            dzProfilePhoto.addFile(target);
                            dzProfilePhoto.processQueue();
                        }
                    },
                    function(jqXhr, textStatus, errorThrown) {
                        alert("Error");
                    });
            }
            break;
        case "change__password--tab":
            {
            }
            break;
        }
    }

    function onPostShowHideClick(postId) {
        console.log(`Update post: ${postId} item availability`);
        getPostByIdAsync(postId,
            function(post) {
                console.log(`Current hidden state is: ${post.hidden}`);
                post.hidden = !post.hidden;
                console.log(`Set current hidden state as: ${post.hidden}`);
                updatePostByIdAsync(postId,
                    post,
                    function(response) {
                        if (!post.hidden) {
                            $(`#post__visible--${postId}`)
                                .html("<i class='zmdi zmdi-eye-off zmdi-hc-fw' style='color: black'>")
                                .next()
                                .text(" Hide post");
                        } else {
                            $(`#post__visible--${postId}`)
                                .html("<i class='zmdi zmdi-eye zmdi-hc-fw' style='color: black'>")
                                .next()
                                .text(" Show post");
                        }
                        console.log(
                            `MatchedCount: ${response.matchedCount} ModifiedCount: ${response.matchedCount
                            } IsAcknowledged: ${response.isAcknowledged} IsModifiedCountAvailable: ${response
                            .isModifiedCountAvailable}`);
                    });
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
    }

    function onReplyCommentClick(postId, replyTo, commentId) {
        removeReplyForm("reply-form");

        $(`#${commentId} #reply-placeholder:first`).append(
            `<div id="reply-form">   
                <textarea id="write-reply__editor" style="display: none"></textarea>    
                <div class="row mt-2">
                    <div class="col-12">   
                        <input type="button" class="btn btn-light waves-effect waves-light btn-sm mr-2" value="Cancel" onclick="removeReplyForm('reply-form')"/>     
                        <input id="add-comment__reply" type="button" class="btn btn-primary waves-effect waves-light btn-sm" value="Reply"/>
                    </div>    
                </div>
            </div>`
        );

        var writeReplyEditor = new SimpleMDE({
            status: false,
            element: $("#write-reply__editor")[0],
            placeholder: "Write reply...",
            fullScreen: false,
            withPreview: false,
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');

        $("#add-comment__reply").off("click").click(function() {
            removeReplyForm("reply-form");

            var text = writeReplyEditor.options.previewRender(writeReplyEditor.value());

            var parentId = null;

            if (replyTo != null) {
                parentId = replyTo;
            } else {
                parentId = commentId;
            }

            console.log(`Post: ${postId} Reply to: ${replyTo} Comment: ${commentId}`);

            var comment = {
                text: text,
                postId: postId,
                replyTo: parentId
            };

            createPostCommentAsync(comment,
                function(response) {
                    $(`#${comment.replyTo} .media-body:first`).append(renderCommentForm(response));

                    $([document.documentElement, document.body]).animate({
                            scrollTop: $(`#media-comment__${response.commentId}`).offset().top - 250
                        },
                        200);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });

            writeReplyEditor.toTextArea();
            writeReplyEditor = null;
        });
    }

    function onDeleteCommentClick(postId, commentId) {
        $("#delete-comment__delete").off("click").click(function() {
            deletePostCommentAsync(postId,
                commentId,
                function(response) {
                    console.log(`Matched count: ${response.matchedCount}`);
                    console.log(`Modified count: ${response.modifiedCount}`);
                    console.log(`Is acknowledged: ${response.isAcknowledged}`);
                    console.log(`Is modified count available: ${response.isModifiedCountAvailable}`);
                    $(`#${commentId}`).empty();
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
            $("#delete-comment__modal").modal('toggle');
        });
    }

    function onPostCommentVoteClick(postId, commentId, voteType) {
        var votesCount = $(`#votes-count__${commentId}`);
        var vote = {
            voteType: voteType,
            votesCount: votesCount.text()
        }
        createPostCommentVoteAsync(postId,
            commentId,
            vote,
            function(response) {
                switch (response.voteType) {
                case 1:
                    {
                        console.log(`Post id: ${postId} votes count: ${response.votesCount}`)
                        var voteIcon = $(`#vote-icon__${commentId}`);
                        voteIcon.toggleClass('zmdi-favorite');
                        voteIcon.toggleClass('zmdi-favorite-outline');
                        votesCount.text(response.votesCount);
                    }
                    break;
                }
            },
            function(jqXhr, textStatus, errorThrown) {
                alert("Error");
            });
    }

    $(window).on('load',
        function() {
            $('#body').fadeIn(100);
        });

    $(document).ready(function() {
        var body = $('body');

        body.on('focus',
            '.search__text',
            function() {
                $(this).closest('.search').addClass('search--focus');
            });

        body.on('blur',
            '.search__text',
            function() {
                $(this).val('');
                $(this).closest('.search').removeClass('search--focus');
            });

        body.on('click',
            '[data-ma-action]',
            function(e) {
                e.preventDefault();
                var $this = $(this);
                var action = $this.data('ma-action');
                switch (action) {
                case 'search-open':
                    $('.search').addClass('search--toggled');
                    break;
                case 'search-close':
                    $('.search').removeClass('search--toggled');
                    break;
                }
            });

        $("#add-comment").click(function() {
            var postId = $("section").attr('id');
            var text = textEditor["add__comment--text__editor"].options.previewRender(
                textEditor["add__comment--text__editor"].value());
            var comment = {
                postId: postId,
                text: text
            }
            createPostCommentAsync(comment,
                function(response) {
                    $("#post-comments").prepend(renderCommentForm(response));

                    $([document.documentElement, document.body]).animate({
                            scrollTop: $(`#media-comment__${response.commentId}`).offset().top - 250
                        },
                        200);
                },
                function(jqXhr, textStatus, errorThrown) {
                    alert("Error");
                });
            textEditor["add__comment--text__editor"].value("");
        });

        $("#sign-out__dropdown").click(function(e) {
            e.preventDefault();
            $.ajax({
                url: "/Account/SignOut?returnUrl=/",
                type: "GET",
                contentType: "application/json",
                error: function(jqXhr, textStatus, errorThrown) {
                    console.log("jqXhr: " + jqXhr);
                    console.log("textStatus: " + textStatus);
                    console.log("errorThrown: " + errorThrown);
                },
                success: function(response) {
                    window.location.replace(response.returnUrl);
                }
            });
            return false;
        });

        $("#add__post--text__editor, #edit__post--text__editor, #add__comment--text__editor, #edit__comment--text__editor")
            .each(function(index, element) {
                console.log(`Text editor element id: ${element.id}`);

                textEditor[element.id] = new SimpleMDE({
                    status: false,
                    element: element,
                    placeholder: "Write something...",
                    fullScreen: false,
                    withPreview: false,
                    spellChecker: false
                });

                //Fix for empty editors until it has no focus
                $('#add__post--modal').on('shown.bs.modal',
                    function() {
                        console.log("Add post shown.bs.modal");
                        textEditor["add__post--text__editor"].codemirror.refresh();
                    });

                $('#edit-post__modal').on('shown.bs.modal',
                    function() {
                        console.log("Edit post shown.bs.modal");
                        $('#scroll-fix').focus();
                        textEditor["edit__post--text__editor"].codemirror.refresh();
                    });

                $("#edit-comment__modal").on('shown.bs.modal',
                    function() {
                        console.log("Edit comment shown.bs.modal");
                        textEditor["edit__comment--text__editor"].codemirror.refresh();
                    });

                //Fix for side by side & fullscreen
                textEditor[element.id].codemirror.on('refresh',
                    function() {
                        if (textEditor[element.id].isFullscreenActive()) {
                            $('body').addClass('simplemde-fullscreen');
                        } else {
                            $('body').removeClass('simplemde-fullscreen');
                        }
                    });
            });

        if ($("#edit__profile--modal").length) {
            flatpickr($("#edit__profile--birthday")[0],
                {
                    static: true,
                    altInput: true,
                    enableTime: false,
                    dateFormat: "Y-m-d"
                });
        }

        $(".search").submit(function(event) {
            event.preventDefault();
            window.location.replace(window.location.href + "?page=1&keyword=" + $(".search__text").val());
        });

        $(".CodeMirror, .CodeMirror-scroll").css('min-height', '150px');
    });
</script>

<script src="https://maps.googleapis.com/maps/api/js?key=@Model.PlacesApi&libraries=places&callback=initMap" async defer></script>